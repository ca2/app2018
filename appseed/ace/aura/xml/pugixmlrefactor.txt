//// Include STL headers
//#ifndef PUGIXML_NO_STL
//#	include <iterator>
//#	include <iosfwd>
//#	include <string>
//#endif

// xml
typedef ::string string_t;

std::basic_ostream => std::ostringstream

xxx	#ifndef PUGIXML_NO_STL
xxx		typedef std::bidirectional_iterator_tag iterator_category;
xxx	#endif


pugixml => xml

xml_*  => ::xml:: - and fixes

// xml
typedef ::file::writer writer;



namespace xml
{

   void node::write(::file::output_stream & ostream)
   {

      print(ostream);

   }

   void node::read(::file:input_stream & ostream)
   {

      append(ostream);

   }

   void document::write(::file::output_stream & ostream)
   {

      print(ostream);

   }

   void document::read(::file::input_stream & istream)
   {

      destroy();

      string str;
      istream >> str;
      load(str);

   }

         index node::get_index()
      {
         if(_root == NULL)
         {
            return -1;
         }
         if(_root->parent == NULL)
         {
            return -1;
         }
         ::count c = 0;
         node_struct * p = _root->parent->first_child;
         while(p != NULL)
         {
            if(p == _root)
            {
               return c;
            }
            c++;

            p = p->next_sibling;
            if(p == _root->parent->first_child)
               break;
         }
         return -1;

      }


      index_array node::get_indexed_path() const
      {

         ::index i = get_index();

         if(i < 0)
         {

            return index_array();

         }
         
         index_array ia = _root->parent->get_indexed_path();
         
         index.add(i);

         return ia;

      }


} // namespace xml





#ifndef PUGIXML_NO_STL
	// Convert wide string to UTF8
   inline string as_utf8(const wchar_t* str) { return ::str::international::unicode_to_utf8(str);  }
   inline string as_utf8(wstring & str)  { return ::str::international::unicode_to_utf8(str); }
	
	// Convert UTF8 to wide string
   inline wstring as_wide(const char* str) { return ::str::international::utf8_to_unicode(str); }
   inline string  as_wide(string & str)  { return ::str::international::utf8_to_unicode(str); }
#endif
