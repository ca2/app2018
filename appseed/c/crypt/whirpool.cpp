/**
 * The Whirlpool hashing function.
 *
 * <P>
 * <b>References</b>
 *
 * <P>
 * The Whirlpool algorithm was developed by
 * <a href="mailto:pbarreto@scopus.com.br">Paulo S. L. M. Barreto</a> and
 * <a href="mailto:vincent.rijmen@cryptomathic.com">Vincent Rijmen</a>.
 *
 * See
 *      P.S.L.M. Barreto, V. Rijmen,
 *      ``The Whirlpool hashing function,''
 *      NESSIE submission, 2000 (tweaked version, 2001),
 *      <https://www.cosic.esat.kuleuven.ac.be/nessie/workshop/submissions/whirlpool.zip>
 * 
 * @author  Paulo S.L.M. Barreto
 * @author  Vincent Rijmen.
 *
 * @version 3.0 (2003.03.12)
 *
 * =============================================================================
 *
 * Differences from version 2.1:
 *
 * - Suboptimal diffusion matrix replaced by cir(1, 1, 4, 1, 8, 5, 2, 9).
 *
 * =============================================================================
 *
 * Differences from version 2.0:
 *
 * - Generation of ISO/IEC 10118-3 test vectors.
 * - Bug fix: nonzero carry was ignored when tallying the data length
 *      (this bug apparently only manifested itself when feeding data
 *      in pieces rather than in a single chunk at once).
 * - Support for MS Visual C++ 64-bit integer arithmetic.
 *
 * Differences from version 1.0:
 *
 * - Original S-box replaced by the tweaked, hardware-efficient version.
 *
 * =============================================================================
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
#include "framework.h"

/* #define TRACE_INTERMEDIATE_VALUES */

/*
 * The number of rounds of the internal dedicated block cipher.
 */
#define R 10

/*
 * Though Whirlpool is endianness-neutral, the encryption tables are listed
 * in BIG-ENDIAN format, which is adopted throughout this implementation
 * (but little-endian notation would be equally suitable if consistently
 * employed).
 */

static const uint64_t C0[256] = {
    ULL(0x18186018c07830d8), ULL(0x23238c2305af4626), ULL(0xc6c63fc67ef991b8), ULL(0xe8e887e8136fcdfb),
    ULL(0x878726874ca113cb), ULL(0xb8b8dab8a9626d11), ULL(0x0101040108050209), ULL(0x4f4f214f426e9e0d),
    ULL(0x3636d836adee6c9b), ULL(0xa6a6a2a6590451ff), ULL(0xd2d26fd2debdb90c), ULL(0xf5f5f3f5fb06f70e),
    ULL(0x7979f979ef80f296), ULL(0x6f6fa16f5fcede30), ULL(0x91917e91fcef3f6d), ULL(0x52525552aa07a4f8),
    ULL(0x60609d6027fdc047), ULL(0xbcbccabc89766535), ULL(0x9b9b569baccd2b37), ULL(0x8e8e028e048c018a),
    ULL(0xa3a3b6a371155bd2), ULL(0x0c0c300c603c186c), ULL(0x7b7bf17bff8af684), ULL(0x3535d435b5e16a80),
    ULL(0x1d1d741de8693af5), ULL(0xe0e0a7e05347ddb3), ULL(0xd7d77bd7f6acb321), ULL(0xc2c22fc25eed999c),
    ULL(0x2e2eb82e6d965c43), ULL(0x4b4b314b627a9629), ULL(0xfefedffea321e15d), ULL(0x575741578216aed5),
    ULL(0x15155415a8412abd), ULL(0x7777c1779fb6eee8), ULL(0x3737dc37a5eb6e92), ULL(0xe5e5b3e57b56d79e),
    ULL(0x9f9f469f8cd92313), ULL(0xf0f0e7f0d317fd23), ULL(0x4a4a354a6a7f9420), ULL(0xdada4fda9e95a944),
    ULL(0x58587d58fa25b0a2), ULL(0xc9c903c906ca8fcf), ULL(0x2929a429558d527c), ULL(0x0a0a280a5022145a),
    ULL(0xb1b1feb1e14f7f50), ULL(0xa0a0baa0691a5dc9), ULL(0x6b6bb16b7fdad614), ULL(0x85852e855cab17d9),
    ULL(0xbdbdcebd8173673c), ULL(0x5d5d695dd234ba8f), ULL(0x1010401080502090), ULL(0xf4f4f7f4f303f507),
    ULL(0xcbcb0bcb16c08bdd), ULL(0x3e3ef83eedc67cd3), ULL(0x0505140528110a2d), ULL(0x676781671fe6ce78),
    ULL(0xe4e4b7e47353d597), ULL(0x27279c2725bb4e02), ULL(0x4141194132588273), ULL(0x8b8b168b2c9d0ba7),
    ULL(0xa7a7a6a7510153f6), ULL(0x7d7de97dcf94fab2), ULL(0x95956e95dcfb3749), ULL(0xd8d847d88e9fad56),
    ULL(0xfbfbcbfb8b30eb70), ULL(0xeeee9fee2371c1cd), ULL(0x7c7ced7cc791f8bb), ULL(0x6666856617e3cc71),
    ULL(0xdddd53dda68ea77b), ULL(0x17175c17b84b2eaf), ULL(0x4747014702468e45), ULL(0x9e9e429e84dc211a),
    ULL(0xcaca0fca1ec589d4), ULL(0x2d2db42d75995a58), ULL(0xbfbfc6bf9179632e), ULL(0x07071c07381b0e3f),
    ULL(0xadad8ead012347ac), ULL(0x5a5a755aea2fb4b0), ULL(0x838336836cb51bef), ULL(0x3333cc3385ff66b6),
    ULL(0x636391633ff2c65c), ULL(0x02020802100a0412), ULL(0xaaaa92aa39384993), ULL(0x7171d971afa8e2de),
    ULL(0xc8c807c80ecf8dc6), ULL(0x19196419c87d32d1), ULL(0x494939497270923b), ULL(0xd9d943d9869aaf5f),
    ULL(0xf2f2eff2c31df931), ULL(0xe3e3abe34b48dba8), ULL(0x5b5b715be22ab6b9), ULL(0x88881a8834920dbc),
    ULL(0x9a9a529aa4c8293e), ULL(0x262698262dbe4c0b), ULL(0x3232c8328dfa64bf), ULL(0xb0b0fab0e94a7d59),
    ULL(0xe9e983e91b6acff2), ULL(0x0f0f3c0f78331e77), ULL(0xd5d573d5e6a6b733), ULL(0x80803a8074ba1df4),
    ULL(0xbebec2be997c6127), ULL(0xcdcd13cd26de87eb), ULL(0x3434d034bde46889), ULL(0x48483d487a759032),
    ULL(0xffffdbffab24e354), ULL(0x7a7af57af78ff48d), ULL(0x90907a90f4ea3d64), ULL(0x5f5f615fc23ebe9d),
    ULL(0x202080201da0403d), ULL(0x6868bd6867d5d00f), ULL(0x1a1a681ad07234ca), ULL(0xaeae82ae192c41b7),
    ULL(0xb4b4eab4c95e757d), ULL(0x54544d549a19a8ce), ULL(0x93937693ece53b7f), ULL(0x222288220daa442f),
    ULL(0x64648d6407e9c863), ULL(0xf1f1e3f1db12ff2a), ULL(0x7373d173bfa2e6cc), ULL(0x12124812905a2482),
    ULL(0x40401d403a5d807a), ULL(0x0808200840281048), ULL(0xc3c32bc356e89b95), ULL(0xecec97ec337bc5df),
    ULL(0xdbdb4bdb9690ab4d), ULL(0xa1a1bea1611f5fc0), ULL(0x8d8d0e8d1c830791), ULL(0x3d3df43df5c97ac8),
    ULL(0x97976697ccf1335b), ULL(0x0000000000000000), ULL(0xcfcf1bcf36d483f9), ULL(0x2b2bac2b4587566e),
    ULL(0x7676c57697b3ece1), ULL(0x8282328264b019e6), ULL(0xd6d67fd6fea9b128), ULL(0x1b1b6c1bd87736c3),
    ULL(0xb5b5eeb5c15b7774), ULL(0xafaf86af112943be), ULL(0x6a6ab56a77dfd41d), ULL(0x50505d50ba0da0ea),
    ULL(0x45450945124c8a57), ULL(0xf3f3ebf3cb18fb38), ULL(0x3030c0309df060ad), ULL(0xefef9bef2b74c3c4),
    ULL(0x3f3ffc3fe5c37eda), ULL(0x55554955921caac7), ULL(0xa2a2b2a2791059db), ULL(0xeaea8fea0365c9e9),
    ULL(0x656589650fecca6a), ULL(0xbabad2bab9686903), ULL(0x2f2fbc2f65935e4a), ULL(0xc0c027c04ee79d8e),
    ULL(0xdede5fdebe81a160), ULL(0x1c1c701ce06c38fc), ULL(0xfdfdd3fdbb2ee746), ULL(0x4d4d294d52649a1f),
    ULL(0x92927292e4e03976), ULL(0x7575c9758fbceafa), ULL(0x06061806301e0c36), ULL(0x8a8a128a249809ae),
    ULL(0xb2b2f2b2f940794b), ULL(0xe6e6bfe66359d185), ULL(0x0e0e380e70361c7e), ULL(0x1f1f7c1ff8633ee7),
    ULL(0x6262956237f7c455), ULL(0xd4d477d4eea3b53a), ULL(0xa8a89aa829324d81), ULL(0x96966296c4f43152),
    ULL(0xf9f9c3f99b3aef62), ULL(0xc5c533c566f697a3), ULL(0x2525942535b14a10), ULL(0x59597959f220b2ab),
    ULL(0x84842a8454ae15d0), ULL(0x7272d572b7a7e4c5), ULL(0x3939e439d5dd72ec), ULL(0x4c4c2d4c5a619816),
    ULL(0x5e5e655eca3bbc94), ULL(0x7878fd78e785f09f), ULL(0x3838e038ddd870e5), ULL(0x8c8c0a8c14860598),
    ULL(0xd1d163d1c6b2bf17), ULL(0xa5a5aea5410b57e4), ULL(0xe2e2afe2434dd9a1), ULL(0x616199612ff8c24e),
    ULL(0xb3b3f6b3f1457b42), ULL(0x2121842115a54234), ULL(0x9c9c4a9c94d62508), ULL(0x1e1e781ef0663cee),
    ULL(0x4343114322528661), ULL(0xc7c73bc776fc93b1), ULL(0xfcfcd7fcb32be54f), ULL(0x0404100420140824),
    ULL(0x51515951b208a2e3), ULL(0x99995e99bcc72f25), ULL(0x6d6da96d4fc4da22), ULL(0x0d0d340d68391a65),
    ULL(0xfafacffa8335e979), ULL(0xdfdf5bdfb684a369), ULL(0x7e7ee57ed79bfca9), ULL(0x242490243db44819),
    ULL(0x3b3bec3bc5d776fe), ULL(0xabab96ab313d4b9a), ULL(0xcece1fce3ed181f0), ULL(0x1111441188552299),
    ULL(0x8f8f068f0c890383), ULL(0x4e4e254e4a6b9c04), ULL(0xb7b7e6b7d1517366), ULL(0xebeb8beb0b60cbe0),
    ULL(0x3c3cf03cfdcc78c1), ULL(0x81813e817cbf1ffd), ULL(0x94946a94d4fe3540), ULL(0xf7f7fbf7eb0cf31c),
    ULL(0xb9b9deb9a1676f18), ULL(0x13134c13985f268b), ULL(0x2c2cb02c7d9c5851), ULL(0xd3d36bd3d6b8bb05),
    ULL(0xe7e7bbe76b5cd38c), ULL(0x6e6ea56e57cbdc39), ULL(0xc4c437c46ef395aa), ULL(0x03030c03180f061b),
    ULL(0x565645568a13acdc), ULL(0x44440d441a49885e), ULL(0x7f7fe17fdf9efea0), ULL(0xa9a99ea921374f88),
    ULL(0x2a2aa82a4d825467), ULL(0xbbbbd6bbb16d6b0a), ULL(0xc1c123c146e29f87), ULL(0x53535153a202a6f1),
    ULL(0xdcdc57dcae8ba572), ULL(0x0b0b2c0b58271653), ULL(0x9d9d4e9d9cd32701), ULL(0x6c6cad6c47c1d82b),
    ULL(0x3131c43195f562a4), ULL(0x7474cd7487b9e8f3), ULL(0xf6f6fff6e309f115), ULL(0x464605460a438c4c),
    ULL(0xacac8aac092645a5), ULL(0x89891e893c970fb5), ULL(0x14145014a04428b4), ULL(0xe1e1a3e15b42dfba),
    ULL(0x16165816b04e2ca6), ULL(0x3a3ae83acdd274f7), ULL(0x6969b9696fd0d206), ULL(0x09092409482d1241),
    ULL(0x7070dd70a7ade0d7), ULL(0xb6b6e2b6d954716f), ULL(0xd0d067d0ceb7bd1e), ULL(0xeded93ed3b7ec7d6),
    ULL(0xcccc17cc2edb85e2), ULL(0x424215422a578468), ULL(0x98985a98b4c22d2c), ULL(0xa4a4aaa4490e55ed),
    ULL(0x2828a0285d885075), ULL(0x5c5c6d5cda31b886), ULL(0xf8f8c7f8933fed6b), ULL(0x8686228644a411c2),
};

static const uint64_t C1[256] = {
    ULL(0xd818186018c07830), ULL(0x2623238c2305af46), ULL(0xb8c6c63fc67ef991), ULL(0xfbe8e887e8136fcd),
    ULL(0xcb878726874ca113), ULL(0x11b8b8dab8a9626d), ULL(0x0901010401080502), ULL(0x0d4f4f214f426e9e),
    ULL(0x9b3636d836adee6c), ULL(0xffa6a6a2a6590451), ULL(0x0cd2d26fd2debdb9), ULL(0x0ef5f5f3f5fb06f7),
    ULL(0x967979f979ef80f2), ULL(0x306f6fa16f5fcede), ULL(0x6d91917e91fcef3f), ULL(0xf852525552aa07a4),
    ULL(0x4760609d6027fdc0), ULL(0x35bcbccabc897665), ULL(0x379b9b569baccd2b), ULL(0x8a8e8e028e048c01),
    ULL(0xd2a3a3b6a371155b), ULL(0x6c0c0c300c603c18), ULL(0x847b7bf17bff8af6), ULL(0x803535d435b5e16a),
    ULL(0xf51d1d741de8693a), ULL(0xb3e0e0a7e05347dd), ULL(0x21d7d77bd7f6acb3), ULL(0x9cc2c22fc25eed99),
    ULL(0x432e2eb82e6d965c), ULL(0x294b4b314b627a96), ULL(0x5dfefedffea321e1), ULL(0xd5575741578216ae),
    ULL(0xbd15155415a8412a), ULL(0xe87777c1779fb6ee), ULL(0x923737dc37a5eb6e), ULL(0x9ee5e5b3e57b56d7),
    ULL(0x139f9f469f8cd923), ULL(0x23f0f0e7f0d317fd), ULL(0x204a4a354a6a7f94), ULL(0x44dada4fda9e95a9),
    ULL(0xa258587d58fa25b0), ULL(0xcfc9c903c906ca8f), ULL(0x7c2929a429558d52), ULL(0x5a0a0a280a502214),
    ULL(0x50b1b1feb1e14f7f), ULL(0xc9a0a0baa0691a5d), ULL(0x146b6bb16b7fdad6), ULL(0xd985852e855cab17),
    ULL(0x3cbdbdcebd817367), ULL(0x8f5d5d695dd234ba), ULL(0x9010104010805020), ULL(0x07f4f4f7f4f303f5),
    ULL(0xddcbcb0bcb16c08b), ULL(0xd33e3ef83eedc67c), ULL(0x2d0505140528110a), ULL(0x78676781671fe6ce),
    ULL(0x97e4e4b7e47353d5), ULL(0x0227279c2725bb4e), ULL(0x7341411941325882), ULL(0xa78b8b168b2c9d0b),
    ULL(0xf6a7a7a6a7510153), ULL(0xb27d7de97dcf94fa), ULL(0x4995956e95dcfb37), ULL(0x56d8d847d88e9fad),
    ULL(0x70fbfbcbfb8b30eb), ULL(0xcdeeee9fee2371c1), ULL(0xbb7c7ced7cc791f8), ULL(0x716666856617e3cc),
    ULL(0x7bdddd53dda68ea7), ULL(0xaf17175c17b84b2e), ULL(0x454747014702468e), ULL(0x1a9e9e429e84dc21),
    ULL(0xd4caca0fca1ec589), ULL(0x582d2db42d75995a), ULL(0x2ebfbfc6bf917963), ULL(0x3f07071c07381b0e),
    ULL(0xacadad8ead012347), ULL(0xb05a5a755aea2fb4), ULL(0xef838336836cb51b), ULL(0xb63333cc3385ff66),
    ULL(0x5c636391633ff2c6), ULL(0x1202020802100a04), ULL(0x93aaaa92aa393849), ULL(0xde7171d971afa8e2),
    ULL(0xc6c8c807c80ecf8d), ULL(0xd119196419c87d32), ULL(0x3b49493949727092), ULL(0x5fd9d943d9869aaf),
    ULL(0x31f2f2eff2c31df9), ULL(0xa8e3e3abe34b48db), ULL(0xb95b5b715be22ab6), ULL(0xbc88881a8834920d),
    ULL(0x3e9a9a529aa4c829), ULL(0x0b262698262dbe4c), ULL(0xbf3232c8328dfa64), ULL(0x59b0b0fab0e94a7d),
    ULL(0xf2e9e983e91b6acf), ULL(0x770f0f3c0f78331e), ULL(0x33d5d573d5e6a6b7), ULL(0xf480803a8074ba1d),
    ULL(0x27bebec2be997c61), ULL(0xebcdcd13cd26de87), ULL(0x893434d034bde468), ULL(0x3248483d487a7590),
    ULL(0x54ffffdbffab24e3), ULL(0x8d7a7af57af78ff4), ULL(0x6490907a90f4ea3d), ULL(0x9d5f5f615fc23ebe),
    ULL(0x3d202080201da040), ULL(0x0f6868bd6867d5d0), ULL(0xca1a1a681ad07234), ULL(0xb7aeae82ae192c41),
    ULL(0x7db4b4eab4c95e75), ULL(0xce54544d549a19a8), ULL(0x7f93937693ece53b), ULL(0x2f222288220daa44),
    ULL(0x6364648d6407e9c8), ULL(0x2af1f1e3f1db12ff), ULL(0xcc7373d173bfa2e6), ULL(0x8212124812905a24),
    ULL(0x7a40401d403a5d80), ULL(0x4808082008402810), ULL(0x95c3c32bc356e89b), ULL(0xdfecec97ec337bc5),
    ULL(0x4ddbdb4bdb9690ab), ULL(0xc0a1a1bea1611f5f), ULL(0x918d8d0e8d1c8307), ULL(0xc83d3df43df5c97a),
    ULL(0x5b97976697ccf133), ULL(0x0000000000000000), ULL(0xf9cfcf1bcf36d483), ULL(0x6e2b2bac2b458756),
    ULL(0xe17676c57697b3ec), ULL(0xe68282328264b019), ULL(0x28d6d67fd6fea9b1), ULL(0xc31b1b6c1bd87736),
    ULL(0x74b5b5eeb5c15b77), ULL(0xbeafaf86af112943), ULL(0x1d6a6ab56a77dfd4), ULL(0xea50505d50ba0da0),
    ULL(0x5745450945124c8a), ULL(0x38f3f3ebf3cb18fb), ULL(0xad3030c0309df060), ULL(0xc4efef9bef2b74c3),
    ULL(0xda3f3ffc3fe5c37e), ULL(0xc755554955921caa), ULL(0xdba2a2b2a2791059), ULL(0xe9eaea8fea0365c9),
    ULL(0x6a656589650fecca), ULL(0x03babad2bab96869), ULL(0x4a2f2fbc2f65935e), ULL(0x8ec0c027c04ee79d),
    ULL(0x60dede5fdebe81a1), ULL(0xfc1c1c701ce06c38), ULL(0x46fdfdd3fdbb2ee7), ULL(0x1f4d4d294d52649a),
    ULL(0x7692927292e4e039), ULL(0xfa7575c9758fbcea), ULL(0x3606061806301e0c), ULL(0xae8a8a128a249809),
    ULL(0x4bb2b2f2b2f94079), ULL(0x85e6e6bfe66359d1), ULL(0x7e0e0e380e70361c), ULL(0xe71f1f7c1ff8633e),
    ULL(0x556262956237f7c4), ULL(0x3ad4d477d4eea3b5), ULL(0x81a8a89aa829324d), ULL(0x5296966296c4f431),
    ULL(0x62f9f9c3f99b3aef), ULL(0xa3c5c533c566f697), ULL(0x102525942535b14a), ULL(0xab59597959f220b2),
    ULL(0xd084842a8454ae15), ULL(0xc57272d572b7a7e4), ULL(0xec3939e439d5dd72), ULL(0x164c4c2d4c5a6198),
    ULL(0x945e5e655eca3bbc), ULL(0x9f7878fd78e785f0), ULL(0xe53838e038ddd870), ULL(0x988c8c0a8c148605),
    ULL(0x17d1d163d1c6b2bf), ULL(0xe4a5a5aea5410b57), ULL(0xa1e2e2afe2434dd9), ULL(0x4e616199612ff8c2),
    ULL(0x42b3b3f6b3f1457b), ULL(0x342121842115a542), ULL(0x089c9c4a9c94d625), ULL(0xee1e1e781ef0663c),
    ULL(0x6143431143225286), ULL(0xb1c7c73bc776fc93), ULL(0x4ffcfcd7fcb32be5), ULL(0x2404041004201408),
    ULL(0xe351515951b208a2), ULL(0x2599995e99bcc72f), ULL(0x226d6da96d4fc4da), ULL(0x650d0d340d68391a),
    ULL(0x79fafacffa8335e9), ULL(0x69dfdf5bdfb684a3), ULL(0xa97e7ee57ed79bfc), ULL(0x19242490243db448),
    ULL(0xfe3b3bec3bc5d776), ULL(0x9aabab96ab313d4b), ULL(0xf0cece1fce3ed181), ULL(0x9911114411885522),
    ULL(0x838f8f068f0c8903), ULL(0x044e4e254e4a6b9c), ULL(0x66b7b7e6b7d15173), ULL(0xe0ebeb8beb0b60cb),
    ULL(0xc13c3cf03cfdcc78), ULL(0xfd81813e817cbf1f), ULL(0x4094946a94d4fe35), ULL(0x1cf7f7fbf7eb0cf3),
    ULL(0x18b9b9deb9a1676f), ULL(0x8b13134c13985f26), ULL(0x512c2cb02c7d9c58), ULL(0x05d3d36bd3d6b8bb),
    ULL(0x8ce7e7bbe76b5cd3), ULL(0x396e6ea56e57cbdc), ULL(0xaac4c437c46ef395), ULL(0x1b03030c03180f06),
    ULL(0xdc565645568a13ac), ULL(0x5e44440d441a4988), ULL(0xa07f7fe17fdf9efe), ULL(0x88a9a99ea921374f),
    ULL(0x672a2aa82a4d8254), ULL(0x0abbbbd6bbb16d6b), ULL(0x87c1c123c146e29f), ULL(0xf153535153a202a6),
    ULL(0x72dcdc57dcae8ba5), ULL(0x530b0b2c0b582716), ULL(0x019d9d4e9d9cd327), ULL(0x2b6c6cad6c47c1d8),
    ULL(0xa43131c43195f562), ULL(0xf37474cd7487b9e8), ULL(0x15f6f6fff6e309f1), ULL(0x4c464605460a438c),
    ULL(0xa5acac8aac092645), ULL(0xb589891e893c970f), ULL(0xb414145014a04428), ULL(0xbae1e1a3e15b42df),
    ULL(0xa616165816b04e2c), ULL(0xf73a3ae83acdd274), ULL(0x066969b9696fd0d2), ULL(0x4109092409482d12),
    ULL(0xd77070dd70a7ade0), ULL(0x6fb6b6e2b6d95471), ULL(0x1ed0d067d0ceb7bd), ULL(0xd6eded93ed3b7ec7),
    ULL(0xe2cccc17cc2edb85), ULL(0x68424215422a5784), ULL(0x2c98985a98b4c22d), ULL(0xeda4a4aaa4490e55),
    ULL(0x752828a0285d8850), ULL(0x865c5c6d5cda31b8), ULL(0x6bf8f8c7f8933fed), ULL(0xc28686228644a411),
};

static const uint64_t C2[256] = {
    ULL(0x30d818186018c078), ULL(0x462623238c2305af), ULL(0x91b8c6c63fc67ef9), ULL(0xcdfbe8e887e8136f),
    ULL(0x13cb878726874ca1), ULL(0x6d11b8b8dab8a962), ULL(0x0209010104010805), ULL(0x9e0d4f4f214f426e),
    ULL(0x6c9b3636d836adee), ULL(0x51ffa6a6a2a65904), ULL(0xb90cd2d26fd2debd), ULL(0xf70ef5f5f3f5fb06),
    ULL(0xf2967979f979ef80), ULL(0xde306f6fa16f5fce), ULL(0x3f6d91917e91fcef), ULL(0xa4f852525552aa07),
    ULL(0xc04760609d6027fd), ULL(0x6535bcbccabc8976), ULL(0x2b379b9b569baccd), ULL(0x018a8e8e028e048c),
    ULL(0x5bd2a3a3b6a37115), ULL(0x186c0c0c300c603c), ULL(0xf6847b7bf17bff8a), ULL(0x6a803535d435b5e1),
    ULL(0x3af51d1d741de869), ULL(0xddb3e0e0a7e05347), ULL(0xb321d7d77bd7f6ac), ULL(0x999cc2c22fc25eed),
    ULL(0x5c432e2eb82e6d96), ULL(0x96294b4b314b627a), ULL(0xe15dfefedffea321), ULL(0xaed5575741578216),
    ULL(0x2abd15155415a841), ULL(0xeee87777c1779fb6), ULL(0x6e923737dc37a5eb), ULL(0xd79ee5e5b3e57b56),
    ULL(0x23139f9f469f8cd9), ULL(0xfd23f0f0e7f0d317), ULL(0x94204a4a354a6a7f), ULL(0xa944dada4fda9e95),
    ULL(0xb0a258587d58fa25), ULL(0x8fcfc9c903c906ca), ULL(0x527c2929a429558d), ULL(0x145a0a0a280a5022),
    ULL(0x7f50b1b1feb1e14f), ULL(0x5dc9a0a0baa0691a), ULL(0xd6146b6bb16b7fda), ULL(0x17d985852e855cab),
    ULL(0x673cbdbdcebd8173), ULL(0xba8f5d5d695dd234), ULL(0x2090101040108050), ULL(0xf507f4f4f7f4f303),
    ULL(0x8bddcbcb0bcb16c0), ULL(0x7cd33e3ef83eedc6), ULL(0x0a2d050514052811), ULL(0xce78676781671fe6),
    ULL(0xd597e4e4b7e47353), ULL(0x4e0227279c2725bb), ULL(0x8273414119413258), ULL(0x0ba78b8b168b2c9d),
    ULL(0x53f6a7a7a6a75101), ULL(0xfab27d7de97dcf94), ULL(0x374995956e95dcfb), ULL(0xad56d8d847d88e9f),
    ULL(0xeb70fbfbcbfb8b30), ULL(0xc1cdeeee9fee2371), ULL(0xf8bb7c7ced7cc791), ULL(0xcc716666856617e3),
    ULL(0xa77bdddd53dda68e), ULL(0x2eaf17175c17b84b), ULL(0x8e45474701470246), ULL(0x211a9e9e429e84dc),
    ULL(0x89d4caca0fca1ec5), ULL(0x5a582d2db42d7599), ULL(0x632ebfbfc6bf9179), ULL(0x0e3f07071c07381b),
    ULL(0x47acadad8ead0123), ULL(0xb4b05a5a755aea2f), ULL(0x1bef838336836cb5), ULL(0x66b63333cc3385ff),
    ULL(0xc65c636391633ff2), ULL(0x041202020802100a), ULL(0x4993aaaa92aa3938), ULL(0xe2de7171d971afa8),
    ULL(0x8dc6c8c807c80ecf), ULL(0x32d119196419c87d), ULL(0x923b494939497270), ULL(0xaf5fd9d943d9869a),
    ULL(0xf931f2f2eff2c31d), ULL(0xdba8e3e3abe34b48), ULL(0xb6b95b5b715be22a), ULL(0x0dbc88881a883492),
    ULL(0x293e9a9a529aa4c8), ULL(0x4c0b262698262dbe), ULL(0x64bf3232c8328dfa), ULL(0x7d59b0b0fab0e94a),
    ULL(0xcff2e9e983e91b6a), ULL(0x1e770f0f3c0f7833), ULL(0xb733d5d573d5e6a6), ULL(0x1df480803a8074ba),
    ULL(0x6127bebec2be997c), ULL(0x87ebcdcd13cd26de), ULL(0x68893434d034bde4), ULL(0x903248483d487a75),
    ULL(0xe354ffffdbffab24), ULL(0xf48d7a7af57af78f), ULL(0x3d6490907a90f4ea), ULL(0xbe9d5f5f615fc23e),
    ULL(0x403d202080201da0), ULL(0xd00f6868bd6867d5), ULL(0x34ca1a1a681ad072), ULL(0x41b7aeae82ae192c),
    ULL(0x757db4b4eab4c95e), ULL(0xa8ce54544d549a19), ULL(0x3b7f93937693ece5), ULL(0x442f222288220daa),
    ULL(0xc86364648d6407e9), ULL(0xff2af1f1e3f1db12), ULL(0xe6cc7373d173bfa2), ULL(0x248212124812905a),
    ULL(0x807a40401d403a5d), ULL(0x1048080820084028), ULL(0x9b95c3c32bc356e8), ULL(0xc5dfecec97ec337b),
    ULL(0xab4ddbdb4bdb9690), ULL(0x5fc0a1a1bea1611f), ULL(0x07918d8d0e8d1c83), ULL(0x7ac83d3df43df5c9),
    ULL(0x335b97976697ccf1), ULL(0x0000000000000000), ULL(0x83f9cfcf1bcf36d4), ULL(0x566e2b2bac2b4587),
    ULL(0xece17676c57697b3), ULL(0x19e68282328264b0), ULL(0xb128d6d67fd6fea9), ULL(0x36c31b1b6c1bd877),
    ULL(0x7774b5b5eeb5c15b), ULL(0x43beafaf86af1129), ULL(0xd41d6a6ab56a77df), ULL(0xa0ea50505d50ba0d),
    ULL(0x8a5745450945124c), ULL(0xfb38f3f3ebf3cb18), ULL(0x60ad3030c0309df0), ULL(0xc3c4efef9bef2b74),
    ULL(0x7eda3f3ffc3fe5c3), ULL(0xaac755554955921c), ULL(0x59dba2a2b2a27910), ULL(0xc9e9eaea8fea0365),
    ULL(0xca6a656589650fec), ULL(0x6903babad2bab968), ULL(0x5e4a2f2fbc2f6593), ULL(0x9d8ec0c027c04ee7),
    ULL(0xa160dede5fdebe81), ULL(0x38fc1c1c701ce06c), ULL(0xe746fdfdd3fdbb2e), ULL(0x9a1f4d4d294d5264),
    ULL(0x397692927292e4e0), ULL(0xeafa7575c9758fbc), ULL(0x0c3606061806301e), ULL(0x09ae8a8a128a2498),
    ULL(0x794bb2b2f2b2f940), ULL(0xd185e6e6bfe66359), ULL(0x1c7e0e0e380e7036), ULL(0x3ee71f1f7c1ff863),
    ULL(0xc4556262956237f7), ULL(0xb53ad4d477d4eea3), ULL(0x4d81a8a89aa82932), ULL(0x315296966296c4f4),
    ULL(0xef62f9f9c3f99b3a), ULL(0x97a3c5c533c566f6), ULL(0x4a102525942535b1), ULL(0xb2ab59597959f220),
    ULL(0x15d084842a8454ae), ULL(0xe4c57272d572b7a7), ULL(0x72ec3939e439d5dd), ULL(0x98164c4c2d4c5a61),
    ULL(0xbc945e5e655eca3b), ULL(0xf09f7878fd78e785), ULL(0x70e53838e038ddd8), ULL(0x05988c8c0a8c1486),
    ULL(0xbf17d1d163d1c6b2), ULL(0x57e4a5a5aea5410b), ULL(0xd9a1e2e2afe2434d), ULL(0xc24e616199612ff8),
    ULL(0x7b42b3b3f6b3f145), ULL(0x42342121842115a5), ULL(0x25089c9c4a9c94d6), ULL(0x3cee1e1e781ef066),
    ULL(0x8661434311432252), ULL(0x93b1c7c73bc776fc), ULL(0xe54ffcfcd7fcb32b), ULL(0x0824040410042014),
    ULL(0xa2e351515951b208), ULL(0x2f2599995e99bcc7), ULL(0xda226d6da96d4fc4), ULL(0x1a650d0d340d6839),
    ULL(0xe979fafacffa8335), ULL(0xa369dfdf5bdfb684), ULL(0xfca97e7ee57ed79b), ULL(0x4819242490243db4),
    ULL(0x76fe3b3bec3bc5d7), ULL(0x4b9aabab96ab313d), ULL(0x81f0cece1fce3ed1), ULL(0x2299111144118855),
    ULL(0x03838f8f068f0c89), ULL(0x9c044e4e254e4a6b), ULL(0x7366b7b7e6b7d151), ULL(0xcbe0ebeb8beb0b60),
    ULL(0x78c13c3cf03cfdcc), ULL(0x1ffd81813e817cbf), ULL(0x354094946a94d4fe), ULL(0xf31cf7f7fbf7eb0c),
    ULL(0x6f18b9b9deb9a167), ULL(0x268b13134c13985f), ULL(0x58512c2cb02c7d9c), ULL(0xbb05d3d36bd3d6b8),
    ULL(0xd38ce7e7bbe76b5c), ULL(0xdc396e6ea56e57cb), ULL(0x95aac4c437c46ef3), ULL(0x061b03030c03180f),
    ULL(0xacdc565645568a13), ULL(0x885e44440d441a49), ULL(0xfea07f7fe17fdf9e), ULL(0x4f88a9a99ea92137),
    ULL(0x54672a2aa82a4d82), ULL(0x6b0abbbbd6bbb16d), ULL(0x9f87c1c123c146e2), ULL(0xa6f153535153a202),
    ULL(0xa572dcdc57dcae8b), ULL(0x16530b0b2c0b5827), ULL(0x27019d9d4e9d9cd3), ULL(0xd82b6c6cad6c47c1),
    ULL(0x62a43131c43195f5), ULL(0xe8f37474cd7487b9), ULL(0xf115f6f6fff6e309), ULL(0x8c4c464605460a43),
    ULL(0x45a5acac8aac0926), ULL(0x0fb589891e893c97), ULL(0x28b414145014a044), ULL(0xdfbae1e1a3e15b42),
    ULL(0x2ca616165816b04e), ULL(0x74f73a3ae83acdd2), ULL(0xd2066969b9696fd0), ULL(0x124109092409482d),
    ULL(0xe0d77070dd70a7ad), ULL(0x716fb6b6e2b6d954), ULL(0xbd1ed0d067d0ceb7), ULL(0xc7d6eded93ed3b7e),
    ULL(0x85e2cccc17cc2edb), ULL(0x8468424215422a57), ULL(0x2d2c98985a98b4c2), ULL(0x55eda4a4aaa4490e),
    ULL(0x50752828a0285d88), ULL(0xb8865c5c6d5cda31), ULL(0xed6bf8f8c7f8933f), ULL(0x11c28686228644a4),
};

static const uint64_t C3[256] = {
    ULL(0x7830d818186018c0), ULL(0xaf462623238c2305), ULL(0xf991b8c6c63fc67e), ULL(0x6fcdfbe8e887e813),
    ULL(0xa113cb878726874c), ULL(0x626d11b8b8dab8a9), ULL(0x0502090101040108), ULL(0x6e9e0d4f4f214f42),
    ULL(0xee6c9b3636d836ad), ULL(0x0451ffa6a6a2a659), ULL(0xbdb90cd2d26fd2de), ULL(0x06f70ef5f5f3f5fb),
    ULL(0x80f2967979f979ef), ULL(0xcede306f6fa16f5f), ULL(0xef3f6d91917e91fc), ULL(0x07a4f852525552aa),
    ULL(0xfdc04760609d6027), ULL(0x766535bcbccabc89), ULL(0xcd2b379b9b569bac), ULL(0x8c018a8e8e028e04),
    ULL(0x155bd2a3a3b6a371), ULL(0x3c186c0c0c300c60), ULL(0x8af6847b7bf17bff), ULL(0xe16a803535d435b5),
    ULL(0x693af51d1d741de8), ULL(0x47ddb3e0e0a7e053), ULL(0xacb321d7d77bd7f6), ULL(0xed999cc2c22fc25e),
    ULL(0x965c432e2eb82e6d), ULL(0x7a96294b4b314b62), ULL(0x21e15dfefedffea3), ULL(0x16aed55757415782),
    ULL(0x412abd15155415a8), ULL(0xb6eee87777c1779f), ULL(0xeb6e923737dc37a5), ULL(0x56d79ee5e5b3e57b),
    ULL(0xd923139f9f469f8c), ULL(0x17fd23f0f0e7f0d3), ULL(0x7f94204a4a354a6a), ULL(0x95a944dada4fda9e),
    ULL(0x25b0a258587d58fa), ULL(0xca8fcfc9c903c906), ULL(0x8d527c2929a42955), ULL(0x22145a0a0a280a50),
    ULL(0x4f7f50b1b1feb1e1), ULL(0x1a5dc9a0a0baa069), ULL(0xdad6146b6bb16b7f), ULL(0xab17d985852e855c),
    ULL(0x73673cbdbdcebd81), ULL(0x34ba8f5d5d695dd2), ULL(0x5020901010401080), ULL(0x03f507f4f4f7f4f3),
    ULL(0xc08bddcbcb0bcb16), ULL(0xc67cd33e3ef83eed), ULL(0x110a2d0505140528), ULL(0xe6ce78676781671f),
    ULL(0x53d597e4e4b7e473), ULL(0xbb4e0227279c2725), ULL(0x5882734141194132), ULL(0x9d0ba78b8b168b2c),
    ULL(0x0153f6a7a7a6a751), ULL(0x94fab27d7de97dcf), ULL(0xfb374995956e95dc), ULL(0x9fad56d8d847d88e),
    ULL(0x30eb70fbfbcbfb8b), ULL(0x71c1cdeeee9fee23), ULL(0x91f8bb7c7ced7cc7), ULL(0xe3cc716666856617),
    ULL(0x8ea77bdddd53dda6), ULL(0x4b2eaf17175c17b8), ULL(0x468e454747014702), ULL(0xdc211a9e9e429e84),
    ULL(0xc589d4caca0fca1e), ULL(0x995a582d2db42d75), ULL(0x79632ebfbfc6bf91), ULL(0x1b0e3f07071c0738),
    ULL(0x2347acadad8ead01), ULL(0x2fb4b05a5a755aea), ULL(0xb51bef838336836c), ULL(0xff66b63333cc3385),
    ULL(0xf2c65c636391633f), ULL(0x0a04120202080210), ULL(0x384993aaaa92aa39), ULL(0xa8e2de7171d971af),
    ULL(0xcf8dc6c8c807c80e), ULL(0x7d32d119196419c8), ULL(0x70923b4949394972), ULL(0x9aaf5fd9d943d986),
    ULL(0x1df931f2f2eff2c3), ULL(0x48dba8e3e3abe34b), ULL(0x2ab6b95b5b715be2), ULL(0x920dbc88881a8834),
    ULL(0xc8293e9a9a529aa4), ULL(0xbe4c0b262698262d), ULL(0xfa64bf3232c8328d), ULL(0x4a7d59b0b0fab0e9),
    ULL(0x6acff2e9e983e91b), ULL(0x331e770f0f3c0f78), ULL(0xa6b733d5d573d5e6), ULL(0xba1df480803a8074),
    ULL(0x7c6127bebec2be99), ULL(0xde87ebcdcd13cd26), ULL(0xe468893434d034bd), ULL(0x75903248483d487a),
    ULL(0x24e354ffffdbffab), ULL(0x8ff48d7a7af57af7), ULL(0xea3d6490907a90f4), ULL(0x3ebe9d5f5f615fc2),
    ULL(0xa0403d202080201d), ULL(0xd5d00f6868bd6867), ULL(0x7234ca1a1a681ad0), ULL(0x2c41b7aeae82ae19),
    ULL(0x5e757db4b4eab4c9), ULL(0x19a8ce54544d549a), ULL(0xe53b7f93937693ec), ULL(0xaa442f222288220d),
    ULL(0xe9c86364648d6407), ULL(0x12ff2af1f1e3f1db), ULL(0xa2e6cc7373d173bf), ULL(0x5a24821212481290),
    ULL(0x5d807a40401d403a), ULL(0x2810480808200840), ULL(0xe89b95c3c32bc356), ULL(0x7bc5dfecec97ec33),
    ULL(0x90ab4ddbdb4bdb96), ULL(0x1f5fc0a1a1bea161), ULL(0x8307918d8d0e8d1c), ULL(0xc97ac83d3df43df5),
    ULL(0xf1335b97976697cc), ULL(0x0000000000000000), ULL(0xd483f9cfcf1bcf36), ULL(0x87566e2b2bac2b45),
    ULL(0xb3ece17676c57697), ULL(0xb019e68282328264), ULL(0xa9b128d6d67fd6fe), ULL(0x7736c31b1b6c1bd8),
    ULL(0x5b7774b5b5eeb5c1), ULL(0x2943beafaf86af11), ULL(0xdfd41d6a6ab56a77), ULL(0x0da0ea50505d50ba),
    ULL(0x4c8a574545094512), ULL(0x18fb38f3f3ebf3cb), ULL(0xf060ad3030c0309d), ULL(0x74c3c4efef9bef2b),
    ULL(0xc37eda3f3ffc3fe5), ULL(0x1caac75555495592), ULL(0x1059dba2a2b2a279), ULL(0x65c9e9eaea8fea03),
    ULL(0xecca6a656589650f), ULL(0x686903babad2bab9), ULL(0x935e4a2f2fbc2f65), ULL(0xe79d8ec0c027c04e),
    ULL(0x81a160dede5fdebe), ULL(0x6c38fc1c1c701ce0), ULL(0x2ee746fdfdd3fdbb), ULL(0x649a1f4d4d294d52),
    ULL(0xe0397692927292e4), ULL(0xbceafa7575c9758f), ULL(0x1e0c360606180630), ULL(0x9809ae8a8a128a24),
    ULL(0x40794bb2b2f2b2f9), ULL(0x59d185e6e6bfe663), ULL(0x361c7e0e0e380e70), ULL(0x633ee71f1f7c1ff8),
    ULL(0xf7c4556262956237), ULL(0xa3b53ad4d477d4ee), ULL(0x324d81a8a89aa829), ULL(0xf4315296966296c4),
    ULL(0x3aef62f9f9c3f99b), ULL(0xf697a3c5c533c566), ULL(0xb14a102525942535), ULL(0x20b2ab59597959f2),
    ULL(0xae15d084842a8454), ULL(0xa7e4c57272d572b7), ULL(0xdd72ec3939e439d5), ULL(0x6198164c4c2d4c5a),
    ULL(0x3bbc945e5e655eca), ULL(0x85f09f7878fd78e7), ULL(0xd870e53838e038dd), ULL(0x8605988c8c0a8c14),
    ULL(0xb2bf17d1d163d1c6), ULL(0x0b57e4a5a5aea541), ULL(0x4dd9a1e2e2afe243), ULL(0xf8c24e616199612f),
    ULL(0x457b42b3b3f6b3f1), ULL(0xa542342121842115), ULL(0xd625089c9c4a9c94), ULL(0x663cee1e1e781ef0),
    ULL(0x5286614343114322), ULL(0xfc93b1c7c73bc776), ULL(0x2be54ffcfcd7fcb3), ULL(0x1408240404100420),
    ULL(0x08a2e351515951b2), ULL(0xc72f2599995e99bc), ULL(0xc4da226d6da96d4f), ULL(0x391a650d0d340d68),
    ULL(0x35e979fafacffa83), ULL(0x84a369dfdf5bdfb6), ULL(0x9bfca97e7ee57ed7), ULL(0xb44819242490243d),
    ULL(0xd776fe3b3bec3bc5), ULL(0x3d4b9aabab96ab31), ULL(0xd181f0cece1fce3e), ULL(0x5522991111441188),
    ULL(0x8903838f8f068f0c), ULL(0x6b9c044e4e254e4a), ULL(0x517366b7b7e6b7d1), ULL(0x60cbe0ebeb8beb0b),
    ULL(0xcc78c13c3cf03cfd), ULL(0xbf1ffd81813e817c), ULL(0xfe354094946a94d4), ULL(0x0cf31cf7f7fbf7eb),
    ULL(0x676f18b9b9deb9a1), ULL(0x5f268b13134c1398), ULL(0x9c58512c2cb02c7d), ULL(0xb8bb05d3d36bd3d6),
    ULL(0x5cd38ce7e7bbe76b), ULL(0xcbdc396e6ea56e57), ULL(0xf395aac4c437c46e), ULL(0x0f061b03030c0318),
    ULL(0x13acdc565645568a), ULL(0x49885e44440d441a), ULL(0x9efea07f7fe17fdf), ULL(0x374f88a9a99ea921),
    ULL(0x8254672a2aa82a4d), ULL(0x6d6b0abbbbd6bbb1), ULL(0xe29f87c1c123c146), ULL(0x02a6f153535153a2),
    ULL(0x8ba572dcdc57dcae), ULL(0x2716530b0b2c0b58), ULL(0xd327019d9d4e9d9c), ULL(0xc1d82b6c6cad6c47),
    ULL(0xf562a43131c43195), ULL(0xb9e8f37474cd7487), ULL(0x09f115f6f6fff6e3), ULL(0x438c4c464605460a),
    ULL(0x2645a5acac8aac09), ULL(0x970fb589891e893c), ULL(0x4428b414145014a0), ULL(0x42dfbae1e1a3e15b),
    ULL(0x4e2ca616165816b0), ULL(0xd274f73a3ae83acd), ULL(0xd0d2066969b9696f), ULL(0x2d12410909240948),
    ULL(0xade0d77070dd70a7), ULL(0x54716fb6b6e2b6d9), ULL(0xb7bd1ed0d067d0ce), ULL(0x7ec7d6eded93ed3b),
    ULL(0xdb85e2cccc17cc2e), ULL(0x578468424215422a), ULL(0xc22d2c98985a98b4), ULL(0x0e55eda4a4aaa449),
    ULL(0x8850752828a0285d), ULL(0x31b8865c5c6d5cda), ULL(0x3fed6bf8f8c7f893), ULL(0xa411c28686228644),
};

static const uint64_t C4[256] = {
    ULL(0xc07830d818186018), ULL(0x05af462623238c23), ULL(0x7ef991b8c6c63fc6), ULL(0x136fcdfbe8e887e8),
    ULL(0x4ca113cb87872687), ULL(0xa9626d11b8b8dab8), ULL(0x0805020901010401), ULL(0x426e9e0d4f4f214f),
    ULL(0xadee6c9b3636d836), ULL(0x590451ffa6a6a2a6), ULL(0xdebdb90cd2d26fd2), ULL(0xfb06f70ef5f5f3f5),
    ULL(0xef80f2967979f979), ULL(0x5fcede306f6fa16f), ULL(0xfcef3f6d91917e91), ULL(0xaa07a4f852525552),
    ULL(0x27fdc04760609d60), ULL(0x89766535bcbccabc), ULL(0xaccd2b379b9b569b), ULL(0x048c018a8e8e028e),
    ULL(0x71155bd2a3a3b6a3), ULL(0x603c186c0c0c300c), ULL(0xff8af6847b7bf17b), ULL(0xb5e16a803535d435),
    ULL(0xe8693af51d1d741d), ULL(0x5347ddb3e0e0a7e0), ULL(0xf6acb321d7d77bd7), ULL(0x5eed999cc2c22fc2),
    ULL(0x6d965c432e2eb82e), ULL(0x627a96294b4b314b), ULL(0xa321e15dfefedffe), ULL(0x8216aed557574157),
    ULL(0xa8412abd15155415), ULL(0x9fb6eee87777c177), ULL(0xa5eb6e923737dc37), ULL(0x7b56d79ee5e5b3e5),
    ULL(0x8cd923139f9f469f), ULL(0xd317fd23f0f0e7f0), ULL(0x6a7f94204a4a354a), ULL(0x9e95a944dada4fda),
    ULL(0xfa25b0a258587d58), ULL(0x06ca8fcfc9c903c9), ULL(0x558d527c2929a429), ULL(0x5022145a0a0a280a),
    ULL(0xe14f7f50b1b1feb1), ULL(0x691a5dc9a0a0baa0), ULL(0x7fdad6146b6bb16b), ULL(0x5cab17d985852e85),
    ULL(0x8173673cbdbdcebd), ULL(0xd234ba8f5d5d695d), ULL(0x8050209010104010), ULL(0xf303f507f4f4f7f4),
    ULL(0x16c08bddcbcb0bcb), ULL(0xedc67cd33e3ef83e), ULL(0x28110a2d05051405), ULL(0x1fe6ce7867678167),
    ULL(0x7353d597e4e4b7e4), ULL(0x25bb4e0227279c27), ULL(0x3258827341411941), ULL(0x2c9d0ba78b8b168b),
    ULL(0x510153f6a7a7a6a7), ULL(0xcf94fab27d7de97d), ULL(0xdcfb374995956e95), ULL(0x8e9fad56d8d847d8),
    ULL(0x8b30eb70fbfbcbfb), ULL(0x2371c1cdeeee9fee), ULL(0xc791f8bb7c7ced7c), ULL(0x17e3cc7166668566),
    ULL(0xa68ea77bdddd53dd), ULL(0xb84b2eaf17175c17), ULL(0x02468e4547470147), ULL(0x84dc211a9e9e429e),
    ULL(0x1ec589d4caca0fca), ULL(0x75995a582d2db42d), ULL(0x9179632ebfbfc6bf), ULL(0x381b0e3f07071c07),
    ULL(0x012347acadad8ead), ULL(0xea2fb4b05a5a755a), ULL(0x6cb51bef83833683), ULL(0x85ff66b63333cc33),
    ULL(0x3ff2c65c63639163), ULL(0x100a041202020802), ULL(0x39384993aaaa92aa), ULL(0xafa8e2de7171d971),
    ULL(0x0ecf8dc6c8c807c8), ULL(0xc87d32d119196419), ULL(0x7270923b49493949), ULL(0x869aaf5fd9d943d9),
    ULL(0xc31df931f2f2eff2), ULL(0x4b48dba8e3e3abe3), ULL(0xe22ab6b95b5b715b), ULL(0x34920dbc88881a88),
    ULL(0xa4c8293e9a9a529a), ULL(0x2dbe4c0b26269826), ULL(0x8dfa64bf3232c832), ULL(0xe94a7d59b0b0fab0),
    ULL(0x1b6acff2e9e983e9), ULL(0x78331e770f0f3c0f), ULL(0xe6a6b733d5d573d5), ULL(0x74ba1df480803a80),
    ULL(0x997c6127bebec2be), ULL(0x26de87ebcdcd13cd), ULL(0xbde468893434d034), ULL(0x7a75903248483d48),
    ULL(0xab24e354ffffdbff), ULL(0xf78ff48d7a7af57a), ULL(0xf4ea3d6490907a90), ULL(0xc23ebe9d5f5f615f),
    ULL(0x1da0403d20208020), ULL(0x67d5d00f6868bd68), ULL(0xd07234ca1a1a681a), ULL(0x192c41b7aeae82ae),
    ULL(0xc95e757db4b4eab4), ULL(0x9a19a8ce54544d54), ULL(0xece53b7f93937693), ULL(0x0daa442f22228822),
    ULL(0x07e9c86364648d64), ULL(0xdb12ff2af1f1e3f1), ULL(0xbfa2e6cc7373d173), ULL(0x905a248212124812),
    ULL(0x3a5d807a40401d40), ULL(0x4028104808082008), ULL(0x56e89b95c3c32bc3), ULL(0x337bc5dfecec97ec),
    ULL(0x9690ab4ddbdb4bdb), ULL(0x611f5fc0a1a1bea1), ULL(0x1c8307918d8d0e8d), ULL(0xf5c97ac83d3df43d),
    ULL(0xccf1335b97976697), ULL(0x0000000000000000), ULL(0x36d483f9cfcf1bcf), ULL(0x4587566e2b2bac2b),
    ULL(0x97b3ece17676c576), ULL(0x64b019e682823282), ULL(0xfea9b128d6d67fd6), ULL(0xd87736c31b1b6c1b),
    ULL(0xc15b7774b5b5eeb5), ULL(0x112943beafaf86af), ULL(0x77dfd41d6a6ab56a), ULL(0xba0da0ea50505d50),
    ULL(0x124c8a5745450945), ULL(0xcb18fb38f3f3ebf3), ULL(0x9df060ad3030c030), ULL(0x2b74c3c4efef9bef),
    ULL(0xe5c37eda3f3ffc3f), ULL(0x921caac755554955), ULL(0x791059dba2a2b2a2), ULL(0x0365c9e9eaea8fea),
    ULL(0x0fecca6a65658965), ULL(0xb9686903babad2ba), ULL(0x65935e4a2f2fbc2f), ULL(0x4ee79d8ec0c027c0),
    ULL(0xbe81a160dede5fde), ULL(0xe06c38fc1c1c701c), ULL(0xbb2ee746fdfdd3fd), ULL(0x52649a1f4d4d294d),
    ULL(0xe4e0397692927292), ULL(0x8fbceafa7575c975), ULL(0x301e0c3606061806), ULL(0x249809ae8a8a128a),
    ULL(0xf940794bb2b2f2b2), ULL(0x6359d185e6e6bfe6), ULL(0x70361c7e0e0e380e), ULL(0xf8633ee71f1f7c1f),
    ULL(0x37f7c45562629562), ULL(0xeea3b53ad4d477d4), ULL(0x29324d81a8a89aa8), ULL(0xc4f4315296966296),
    ULL(0x9b3aef62f9f9c3f9), ULL(0x66f697a3c5c533c5), ULL(0x35b14a1025259425), ULL(0xf220b2ab59597959),
    ULL(0x54ae15d084842a84), ULL(0xb7a7e4c57272d572), ULL(0xd5dd72ec3939e439), ULL(0x5a6198164c4c2d4c),
    ULL(0xca3bbc945e5e655e), ULL(0xe785f09f7878fd78), ULL(0xddd870e53838e038), ULL(0x148605988c8c0a8c),
    ULL(0xc6b2bf17d1d163d1), ULL(0x410b57e4a5a5aea5), ULL(0x434dd9a1e2e2afe2), ULL(0x2ff8c24e61619961),
    ULL(0xf1457b42b3b3f6b3), ULL(0x15a5423421218421), ULL(0x94d625089c9c4a9c), ULL(0xf0663cee1e1e781e),
    ULL(0x2252866143431143), ULL(0x76fc93b1c7c73bc7), ULL(0xb32be54ffcfcd7fc), ULL(0x2014082404041004),
    ULL(0xb208a2e351515951), ULL(0xbcc72f2599995e99), ULL(0x4fc4da226d6da96d), ULL(0x68391a650d0d340d),
    ULL(0x8335e979fafacffa), ULL(0xb684a369dfdf5bdf), ULL(0xd79bfca97e7ee57e), ULL(0x3db4481924249024),
    ULL(0xc5d776fe3b3bec3b), ULL(0x313d4b9aabab96ab), ULL(0x3ed181f0cece1fce), ULL(0x8855229911114411),
    ULL(0x0c8903838f8f068f), ULL(0x4a6b9c044e4e254e), ULL(0xd1517366b7b7e6b7), ULL(0x0b60cbe0ebeb8beb),
    ULL(0xfdcc78c13c3cf03c), ULL(0x7cbf1ffd81813e81), ULL(0xd4fe354094946a94), ULL(0xeb0cf31cf7f7fbf7),
    ULL(0xa1676f18b9b9deb9), ULL(0x985f268b13134c13), ULL(0x7d9c58512c2cb02c), ULL(0xd6b8bb05d3d36bd3),
    ULL(0x6b5cd38ce7e7bbe7), ULL(0x57cbdc396e6ea56e), ULL(0x6ef395aac4c437c4), ULL(0x180f061b03030c03),
    ULL(0x8a13acdc56564556), ULL(0x1a49885e44440d44), ULL(0xdf9efea07f7fe17f), ULL(0x21374f88a9a99ea9),
    ULL(0x4d8254672a2aa82a), ULL(0xb16d6b0abbbbd6bb), ULL(0x46e29f87c1c123c1), ULL(0xa202a6f153535153),
    ULL(0xae8ba572dcdc57dc), ULL(0x582716530b0b2c0b), ULL(0x9cd327019d9d4e9d), ULL(0x47c1d82b6c6cad6c),
    ULL(0x95f562a43131c431), ULL(0x87b9e8f37474cd74), ULL(0xe309f115f6f6fff6), ULL(0x0a438c4c46460546),
    ULL(0x092645a5acac8aac), ULL(0x3c970fb589891e89), ULL(0xa04428b414145014), ULL(0x5b42dfbae1e1a3e1),
    ULL(0xb04e2ca616165816), ULL(0xcdd274f73a3ae83a), ULL(0x6fd0d2066969b969), ULL(0x482d124109092409),
    ULL(0xa7ade0d77070dd70), ULL(0xd954716fb6b6e2b6), ULL(0xceb7bd1ed0d067d0), ULL(0x3b7ec7d6eded93ed),
    ULL(0x2edb85e2cccc17cc), ULL(0x2a57846842421542), ULL(0xb4c22d2c98985a98), ULL(0x490e55eda4a4aaa4),
    ULL(0x5d8850752828a028), ULL(0xda31b8865c5c6d5c), ULL(0x933fed6bf8f8c7f8), ULL(0x44a411c286862286),
};

static const uint64_t C5[256] = {
    ULL(0x18c07830d8181860), ULL(0x2305af462623238c), ULL(0xc67ef991b8c6c63f), ULL(0xe8136fcdfbe8e887),
    ULL(0x874ca113cb878726), ULL(0xb8a9626d11b8b8da), ULL(0x0108050209010104), ULL(0x4f426e9e0d4f4f21),
    ULL(0x36adee6c9b3636d8), ULL(0xa6590451ffa6a6a2), ULL(0xd2debdb90cd2d26f), ULL(0xf5fb06f70ef5f5f3),
    ULL(0x79ef80f2967979f9), ULL(0x6f5fcede306f6fa1), ULL(0x91fcef3f6d91917e), ULL(0x52aa07a4f8525255),
    ULL(0x6027fdc04760609d), ULL(0xbc89766535bcbcca), ULL(0x9baccd2b379b9b56), ULL(0x8e048c018a8e8e02),
    ULL(0xa371155bd2a3a3b6), ULL(0x0c603c186c0c0c30), ULL(0x7bff8af6847b7bf1), ULL(0x35b5e16a803535d4),
    ULL(0x1de8693af51d1d74), ULL(0xe05347ddb3e0e0a7), ULL(0xd7f6acb321d7d77b), ULL(0xc25eed999cc2c22f),
    ULL(0x2e6d965c432e2eb8), ULL(0x4b627a96294b4b31), ULL(0xfea321e15dfefedf), ULL(0x578216aed5575741),
    ULL(0x15a8412abd151554), ULL(0x779fb6eee87777c1), ULL(0x37a5eb6e923737dc), ULL(0xe57b56d79ee5e5b3),
    ULL(0x9f8cd923139f9f46), ULL(0xf0d317fd23f0f0e7), ULL(0x4a6a7f94204a4a35), ULL(0xda9e95a944dada4f),
    ULL(0x58fa25b0a258587d), ULL(0xc906ca8fcfc9c903), ULL(0x29558d527c2929a4), ULL(0x0a5022145a0a0a28),
    ULL(0xb1e14f7f50b1b1fe), ULL(0xa0691a5dc9a0a0ba), ULL(0x6b7fdad6146b6bb1), ULL(0x855cab17d985852e),
    ULL(0xbd8173673cbdbdce), ULL(0x5dd234ba8f5d5d69), ULL(0x1080502090101040), ULL(0xf4f303f507f4f4f7),
    ULL(0xcb16c08bddcbcb0b), ULL(0x3eedc67cd33e3ef8), ULL(0x0528110a2d050514), ULL(0x671fe6ce78676781),
    ULL(0xe47353d597e4e4b7), ULL(0x2725bb4e0227279c), ULL(0x4132588273414119), ULL(0x8b2c9d0ba78b8b16),
    ULL(0xa7510153f6a7a7a6), ULL(0x7dcf94fab27d7de9), ULL(0x95dcfb374995956e), ULL(0xd88e9fad56d8d847),
    ULL(0xfb8b30eb70fbfbcb), ULL(0xee2371c1cdeeee9f), ULL(0x7cc791f8bb7c7ced), ULL(0x6617e3cc71666685),
    ULL(0xdda68ea77bdddd53), ULL(0x17b84b2eaf17175c), ULL(0x4702468e45474701), ULL(0x9e84dc211a9e9e42),
    ULL(0xca1ec589d4caca0f), ULL(0x2d75995a582d2db4), ULL(0xbf9179632ebfbfc6), ULL(0x07381b0e3f07071c),
    ULL(0xad012347acadad8e), ULL(0x5aea2fb4b05a5a75), ULL(0x836cb51bef838336), ULL(0x3385ff66b63333cc),
    ULL(0x633ff2c65c636391), ULL(0x02100a0412020208), ULL(0xaa39384993aaaa92), ULL(0x71afa8e2de7171d9),
    ULL(0xc80ecf8dc6c8c807), ULL(0x19c87d32d1191964), ULL(0x497270923b494939), ULL(0xd9869aaf5fd9d943),
    ULL(0xf2c31df931f2f2ef), ULL(0xe34b48dba8e3e3ab), ULL(0x5be22ab6b95b5b71), ULL(0x8834920dbc88881a),
    ULL(0x9aa4c8293e9a9a52), ULL(0x262dbe4c0b262698), ULL(0x328dfa64bf3232c8), ULL(0xb0e94a7d59b0b0fa),
    ULL(0xe91b6acff2e9e983), ULL(0x0f78331e770f0f3c), ULL(0xd5e6a6b733d5d573), ULL(0x8074ba1df480803a),
    ULL(0xbe997c6127bebec2), ULL(0xcd26de87ebcdcd13), ULL(0x34bde468893434d0), ULL(0x487a75903248483d),
    ULL(0xffab24e354ffffdb), ULL(0x7af78ff48d7a7af5), ULL(0x90f4ea3d6490907a), ULL(0x5fc23ebe9d5f5f61),
    ULL(0x201da0403d202080), ULL(0x6867d5d00f6868bd), ULL(0x1ad07234ca1a1a68), ULL(0xae192c41b7aeae82),
    ULL(0xb4c95e757db4b4ea), ULL(0x549a19a8ce54544d), ULL(0x93ece53b7f939376), ULL(0x220daa442f222288),
    ULL(0x6407e9c86364648d), ULL(0xf1db12ff2af1f1e3), ULL(0x73bfa2e6cc7373d1), ULL(0x12905a2482121248),
    ULL(0x403a5d807a40401d), ULL(0x0840281048080820), ULL(0xc356e89b95c3c32b), ULL(0xec337bc5dfecec97),
    ULL(0xdb9690ab4ddbdb4b), ULL(0xa1611f5fc0a1a1be), ULL(0x8d1c8307918d8d0e), ULL(0x3df5c97ac83d3df4),
    ULL(0x97ccf1335b979766), ULL(0x0000000000000000), ULL(0xcf36d483f9cfcf1b), ULL(0x2b4587566e2b2bac),
    ULL(0x7697b3ece17676c5), ULL(0x8264b019e6828232), ULL(0xd6fea9b128d6d67f), ULL(0x1bd87736c31b1b6c),
    ULL(0xb5c15b7774b5b5ee), ULL(0xaf112943beafaf86), ULL(0x6a77dfd41d6a6ab5), ULL(0x50ba0da0ea50505d),
    ULL(0x45124c8a57454509), ULL(0xf3cb18fb38f3f3eb), ULL(0x309df060ad3030c0), ULL(0xef2b74c3c4efef9b),
    ULL(0x3fe5c37eda3f3ffc), ULL(0x55921caac7555549), ULL(0xa2791059dba2a2b2), ULL(0xea0365c9e9eaea8f),
    ULL(0x650fecca6a656589), ULL(0xbab9686903babad2), ULL(0x2f65935e4a2f2fbc), ULL(0xc04ee79d8ec0c027),
    ULL(0xdebe81a160dede5f), ULL(0x1ce06c38fc1c1c70), ULL(0xfdbb2ee746fdfdd3), ULL(0x4d52649a1f4d4d29),
    ULL(0x92e4e03976929272), ULL(0x758fbceafa7575c9), ULL(0x06301e0c36060618), ULL(0x8a249809ae8a8a12),
    ULL(0xb2f940794bb2b2f2), ULL(0xe66359d185e6e6bf), ULL(0x0e70361c7e0e0e38), ULL(0x1ff8633ee71f1f7c),
    ULL(0x6237f7c455626295), ULL(0xd4eea3b53ad4d477), ULL(0xa829324d81a8a89a), ULL(0x96c4f43152969662),
    ULL(0xf99b3aef62f9f9c3), ULL(0xc566f697a3c5c533), ULL(0x2535b14a10252594), ULL(0x59f220b2ab595979),
    ULL(0x8454ae15d084842a), ULL(0x72b7a7e4c57272d5), ULL(0x39d5dd72ec3939e4), ULL(0x4c5a6198164c4c2d),
    ULL(0x5eca3bbc945e5e65), ULL(0x78e785f09f7878fd), ULL(0x38ddd870e53838e0), ULL(0x8c148605988c8c0a),
    ULL(0xd1c6b2bf17d1d163), ULL(0xa5410b57e4a5a5ae), ULL(0xe2434dd9a1e2e2af), ULL(0x612ff8c24e616199),
    ULL(0xb3f1457b42b3b3f6), ULL(0x2115a54234212184), ULL(0x9c94d625089c9c4a), ULL(0x1ef0663cee1e1e78),
    ULL(0x4322528661434311), ULL(0xc776fc93b1c7c73b), ULL(0xfcb32be54ffcfcd7), ULL(0x0420140824040410),
    ULL(0x51b208a2e3515159), ULL(0x99bcc72f2599995e), ULL(0x6d4fc4da226d6da9), ULL(0x0d68391a650d0d34),
    ULL(0xfa8335e979fafacf), ULL(0xdfb684a369dfdf5b), ULL(0x7ed79bfca97e7ee5), ULL(0x243db44819242490),
    ULL(0x3bc5d776fe3b3bec), ULL(0xab313d4b9aabab96), ULL(0xce3ed181f0cece1f), ULL(0x1188552299111144),
    ULL(0x8f0c8903838f8f06), ULL(0x4e4a6b9c044e4e25), ULL(0xb7d1517366b7b7e6), ULL(0xeb0b60cbe0ebeb8b),
    ULL(0x3cfdcc78c13c3cf0), ULL(0x817cbf1ffd81813e), ULL(0x94d4fe354094946a), ULL(0xf7eb0cf31cf7f7fb),
    ULL(0xb9a1676f18b9b9de), ULL(0x13985f268b13134c), ULL(0x2c7d9c58512c2cb0), ULL(0xd3d6b8bb05d3d36b),
    ULL(0xe76b5cd38ce7e7bb), ULL(0x6e57cbdc396e6ea5), ULL(0xc46ef395aac4c437), ULL(0x03180f061b03030c),
    ULL(0x568a13acdc565645), ULL(0x441a49885e44440d), ULL(0x7fdf9efea07f7fe1), ULL(0xa921374f88a9a99e),
    ULL(0x2a4d8254672a2aa8), ULL(0xbbb16d6b0abbbbd6), ULL(0xc146e29f87c1c123), ULL(0x53a202a6f1535351),
    ULL(0xdcae8ba572dcdc57), ULL(0x0b582716530b0b2c), ULL(0x9d9cd327019d9d4e), ULL(0x6c47c1d82b6c6cad),
    ULL(0x3195f562a43131c4), ULL(0x7487b9e8f37474cd), ULL(0xf6e309f115f6f6ff), ULL(0x460a438c4c464605),
    ULL(0xac092645a5acac8a), ULL(0x893c970fb589891e), ULL(0x14a04428b4141450), ULL(0xe15b42dfbae1e1a3),
    ULL(0x16b04e2ca6161658), ULL(0x3acdd274f73a3ae8), ULL(0x696fd0d2066969b9), ULL(0x09482d1241090924),
    ULL(0x70a7ade0d77070dd), ULL(0xb6d954716fb6b6e2), ULL(0xd0ceb7bd1ed0d067), ULL(0xed3b7ec7d6eded93),
    ULL(0xcc2edb85e2cccc17), ULL(0x422a578468424215), ULL(0x98b4c22d2c98985a), ULL(0xa4490e55eda4a4aa),
    ULL(0x285d8850752828a0), ULL(0x5cda31b8865c5c6d), ULL(0xf8933fed6bf8f8c7), ULL(0x8644a411c2868622),
};

static const uint64_t C6[256] = {
    ULL(0x6018c07830d81818), ULL(0x8c2305af46262323), ULL(0x3fc67ef991b8c6c6), ULL(0x87e8136fcdfbe8e8),
    ULL(0x26874ca113cb8787), ULL(0xdab8a9626d11b8b8), ULL(0x0401080502090101), ULL(0x214f426e9e0d4f4f),
    ULL(0xd836adee6c9b3636), ULL(0xa2a6590451ffa6a6), ULL(0x6fd2debdb90cd2d2), ULL(0xf3f5fb06f70ef5f5),
    ULL(0xf979ef80f2967979), ULL(0xa16f5fcede306f6f), ULL(0x7e91fcef3f6d9191), ULL(0x5552aa07a4f85252),
    ULL(0x9d6027fdc0476060), ULL(0xcabc89766535bcbc), ULL(0x569baccd2b379b9b), ULL(0x028e048c018a8e8e),
    ULL(0xb6a371155bd2a3a3), ULL(0x300c603c186c0c0c), ULL(0xf17bff8af6847b7b), ULL(0xd435b5e16a803535),
    ULL(0x741de8693af51d1d), ULL(0xa7e05347ddb3e0e0), ULL(0x7bd7f6acb321d7d7), ULL(0x2fc25eed999cc2c2),
    ULL(0xb82e6d965c432e2e), ULL(0x314b627a96294b4b), ULL(0xdffea321e15dfefe), ULL(0x41578216aed55757),
    ULL(0x5415a8412abd1515), ULL(0xc1779fb6eee87777), ULL(0xdc37a5eb6e923737), ULL(0xb3e57b56d79ee5e5),
    ULL(0x469f8cd923139f9f), ULL(0xe7f0d317fd23f0f0), ULL(0x354a6a7f94204a4a), ULL(0x4fda9e95a944dada),
    ULL(0x7d58fa25b0a25858), ULL(0x03c906ca8fcfc9c9), ULL(0xa429558d527c2929), ULL(0x280a5022145a0a0a),
    ULL(0xfeb1e14f7f50b1b1), ULL(0xbaa0691a5dc9a0a0), ULL(0xb16b7fdad6146b6b), ULL(0x2e855cab17d98585),
    ULL(0xcebd8173673cbdbd), ULL(0x695dd234ba8f5d5d), ULL(0x4010805020901010), ULL(0xf7f4f303f507f4f4),
    ULL(0x0bcb16c08bddcbcb), ULL(0xf83eedc67cd33e3e), ULL(0x140528110a2d0505), ULL(0x81671fe6ce786767),
    ULL(0xb7e47353d597e4e4), ULL(0x9c2725bb4e022727), ULL(0x1941325882734141), ULL(0x168b2c9d0ba78b8b),
    ULL(0xa6a7510153f6a7a7), ULL(0xe97dcf94fab27d7d), ULL(0x6e95dcfb37499595), ULL(0x47d88e9fad56d8d8),
    ULL(0xcbfb8b30eb70fbfb), ULL(0x9fee2371c1cdeeee), ULL(0xed7cc791f8bb7c7c), ULL(0x856617e3cc716666),
    ULL(0x53dda68ea77bdddd), ULL(0x5c17b84b2eaf1717), ULL(0x014702468e454747), ULL(0x429e84dc211a9e9e),
    ULL(0x0fca1ec589d4caca), ULL(0xb42d75995a582d2d), ULL(0xc6bf9179632ebfbf), ULL(0x1c07381b0e3f0707),
    ULL(0x8ead012347acadad), ULL(0x755aea2fb4b05a5a), ULL(0x36836cb51bef8383), ULL(0xcc3385ff66b63333),
    ULL(0x91633ff2c65c6363), ULL(0x0802100a04120202), ULL(0x92aa39384993aaaa), ULL(0xd971afa8e2de7171),
    ULL(0x07c80ecf8dc6c8c8), ULL(0x6419c87d32d11919), ULL(0x39497270923b4949), ULL(0x43d9869aaf5fd9d9),
    ULL(0xeff2c31df931f2f2), ULL(0xabe34b48dba8e3e3), ULL(0x715be22ab6b95b5b), ULL(0x1a8834920dbc8888),
    ULL(0x529aa4c8293e9a9a), ULL(0x98262dbe4c0b2626), ULL(0xc8328dfa64bf3232), ULL(0xfab0e94a7d59b0b0),
    ULL(0x83e91b6acff2e9e9), ULL(0x3c0f78331e770f0f), ULL(0x73d5e6a6b733d5d5), ULL(0x3a8074ba1df48080),
    ULL(0xc2be997c6127bebe), ULL(0x13cd26de87ebcdcd), ULL(0xd034bde468893434), ULL(0x3d487a7590324848),
    ULL(0xdbffab24e354ffff), ULL(0xf57af78ff48d7a7a), ULL(0x7a90f4ea3d649090), ULL(0x615fc23ebe9d5f5f),
    ULL(0x80201da0403d2020), ULL(0xbd6867d5d00f6868), ULL(0x681ad07234ca1a1a), ULL(0x82ae192c41b7aeae),
    ULL(0xeab4c95e757db4b4), ULL(0x4d549a19a8ce5454), ULL(0x7693ece53b7f9393), ULL(0x88220daa442f2222),
    ULL(0x8d6407e9c8636464), ULL(0xe3f1db12ff2af1f1), ULL(0xd173bfa2e6cc7373), ULL(0x4812905a24821212),
    ULL(0x1d403a5d807a4040), ULL(0x2008402810480808), ULL(0x2bc356e89b95c3c3), ULL(0x97ec337bc5dfecec),
    ULL(0x4bdb9690ab4ddbdb), ULL(0xbea1611f5fc0a1a1), ULL(0x0e8d1c8307918d8d), ULL(0xf43df5c97ac83d3d),
    ULL(0x6697ccf1335b9797), ULL(0x0000000000000000), ULL(0x1bcf36d483f9cfcf), ULL(0xac2b4587566e2b2b),
    ULL(0xc57697b3ece17676), ULL(0x328264b019e68282), ULL(0x7fd6fea9b128d6d6), ULL(0x6c1bd87736c31b1b),
    ULL(0xeeb5c15b7774b5b5), ULL(0x86af112943beafaf), ULL(0xb56a77dfd41d6a6a), ULL(0x5d50ba0da0ea5050),
    ULL(0x0945124c8a574545), ULL(0xebf3cb18fb38f3f3), ULL(0xc0309df060ad3030), ULL(0x9bef2b74c3c4efef),
    ULL(0xfc3fe5c37eda3f3f), ULL(0x4955921caac75555), ULL(0xb2a2791059dba2a2), ULL(0x8fea0365c9e9eaea),
    ULL(0x89650fecca6a6565), ULL(0xd2bab9686903baba), ULL(0xbc2f65935e4a2f2f), ULL(0x27c04ee79d8ec0c0),
    ULL(0x5fdebe81a160dede), ULL(0x701ce06c38fc1c1c), ULL(0xd3fdbb2ee746fdfd), ULL(0x294d52649a1f4d4d),
    ULL(0x7292e4e039769292), ULL(0xc9758fbceafa7575), ULL(0x1806301e0c360606), ULL(0x128a249809ae8a8a),
    ULL(0xf2b2f940794bb2b2), ULL(0xbfe66359d185e6e6), ULL(0x380e70361c7e0e0e), ULL(0x7c1ff8633ee71f1f),
    ULL(0x956237f7c4556262), ULL(0x77d4eea3b53ad4d4), ULL(0x9aa829324d81a8a8), ULL(0x6296c4f431529696),
    ULL(0xc3f99b3aef62f9f9), ULL(0x33c566f697a3c5c5), ULL(0x942535b14a102525), ULL(0x7959f220b2ab5959),
    ULL(0x2a8454ae15d08484), ULL(0xd572b7a7e4c57272), ULL(0xe439d5dd72ec3939), ULL(0x2d4c5a6198164c4c),
    ULL(0x655eca3bbc945e5e), ULL(0xfd78e785f09f7878), ULL(0xe038ddd870e53838), ULL(0x0a8c148605988c8c),
    ULL(0x63d1c6b2bf17d1d1), ULL(0xaea5410b57e4a5a5), ULL(0xafe2434dd9a1e2e2), ULL(0x99612ff8c24e6161),
    ULL(0xf6b3f1457b42b3b3), ULL(0x842115a542342121), ULL(0x4a9c94d625089c9c), ULL(0x781ef0663cee1e1e),
    ULL(0x1143225286614343), ULL(0x3bc776fc93b1c7c7), ULL(0xd7fcb32be54ffcfc), ULL(0x1004201408240404),
    ULL(0x5951b208a2e35151), ULL(0x5e99bcc72f259999), ULL(0xa96d4fc4da226d6d), ULL(0x340d68391a650d0d),
    ULL(0xcffa8335e979fafa), ULL(0x5bdfb684a369dfdf), ULL(0xe57ed79bfca97e7e), ULL(0x90243db448192424),
    ULL(0xec3bc5d776fe3b3b), ULL(0x96ab313d4b9aabab), ULL(0x1fce3ed181f0cece), ULL(0x4411885522991111),
    ULL(0x068f0c8903838f8f), ULL(0x254e4a6b9c044e4e), ULL(0xe6b7d1517366b7b7), ULL(0x8beb0b60cbe0ebeb),
    ULL(0xf03cfdcc78c13c3c), ULL(0x3e817cbf1ffd8181), ULL(0x6a94d4fe35409494), ULL(0xfbf7eb0cf31cf7f7),
    ULL(0xdeb9a1676f18b9b9), ULL(0x4c13985f268b1313), ULL(0xb02c7d9c58512c2c), ULL(0x6bd3d6b8bb05d3d3),
    ULL(0xbbe76b5cd38ce7e7), ULL(0xa56e57cbdc396e6e), ULL(0x37c46ef395aac4c4), ULL(0x0c03180f061b0303),
    ULL(0x45568a13acdc5656), ULL(0x0d441a49885e4444), ULL(0xe17fdf9efea07f7f), ULL(0x9ea921374f88a9a9),
    ULL(0xa82a4d8254672a2a), ULL(0xd6bbb16d6b0abbbb), ULL(0x23c146e29f87c1c1), ULL(0x5153a202a6f15353),
    ULL(0x57dcae8ba572dcdc), ULL(0x2c0b582716530b0b), ULL(0x4e9d9cd327019d9d), ULL(0xad6c47c1d82b6c6c),
    ULL(0xc43195f562a43131), ULL(0xcd7487b9e8f37474), ULL(0xfff6e309f115f6f6), ULL(0x05460a438c4c4646),
    ULL(0x8aac092645a5acac), ULL(0x1e893c970fb58989), ULL(0x5014a04428b41414), ULL(0xa3e15b42dfbae1e1),
    ULL(0x5816b04e2ca61616), ULL(0xe83acdd274f73a3a), ULL(0xb9696fd0d2066969), ULL(0x2409482d12410909),
    ULL(0xdd70a7ade0d77070), ULL(0xe2b6d954716fb6b6), ULL(0x67d0ceb7bd1ed0d0), ULL(0x93ed3b7ec7d6eded),
    ULL(0x17cc2edb85e2cccc), ULL(0x15422a5784684242), ULL(0x5a98b4c22d2c9898), ULL(0xaaa4490e55eda4a4),
    ULL(0xa0285d8850752828), ULL(0x6d5cda31b8865c5c), ULL(0xc7f8933fed6bf8f8), ULL(0x228644a411c28686),
};

static const uint64_t C7[256] = {
    ULL(0x186018c07830d818), ULL(0x238c2305af462623), ULL(0xc63fc67ef991b8c6), ULL(0xe887e8136fcdfbe8),
    ULL(0x8726874ca113cb87), ULL(0xb8dab8a9626d11b8), ULL(0x0104010805020901), ULL(0x4f214f426e9e0d4f),
    ULL(0x36d836adee6c9b36), ULL(0xa6a2a6590451ffa6), ULL(0xd26fd2debdb90cd2), ULL(0xf5f3f5fb06f70ef5),
    ULL(0x79f979ef80f29679), ULL(0x6fa16f5fcede306f), ULL(0x917e91fcef3f6d91), ULL(0x525552aa07a4f852),
    ULL(0x609d6027fdc04760), ULL(0xbccabc89766535bc), ULL(0x9b569baccd2b379b), ULL(0x8e028e048c018a8e),
    ULL(0xa3b6a371155bd2a3), ULL(0x0c300c603c186c0c), ULL(0x7bf17bff8af6847b), ULL(0x35d435b5e16a8035),
    ULL(0x1d741de8693af51d), ULL(0xe0a7e05347ddb3e0), ULL(0xd77bd7f6acb321d7), ULL(0xc22fc25eed999cc2),
    ULL(0x2eb82e6d965c432e), ULL(0x4b314b627a96294b), ULL(0xfedffea321e15dfe), ULL(0x5741578216aed557),
    ULL(0x155415a8412abd15), ULL(0x77c1779fb6eee877), ULL(0x37dc37a5eb6e9237), ULL(0xe5b3e57b56d79ee5),
    ULL(0x9f469f8cd923139f), ULL(0xf0e7f0d317fd23f0), ULL(0x4a354a6a7f94204a), ULL(0xda4fda9e95a944da),
    ULL(0x587d58fa25b0a258), ULL(0xc903c906ca8fcfc9), ULL(0x29a429558d527c29), ULL(0x0a280a5022145a0a),
    ULL(0xb1feb1e14f7f50b1), ULL(0xa0baa0691a5dc9a0), ULL(0x6bb16b7fdad6146b), ULL(0x852e855cab17d985),
    ULL(0xbdcebd8173673cbd), ULL(0x5d695dd234ba8f5d), ULL(0x1040108050209010), ULL(0xf4f7f4f303f507f4),
    ULL(0xcb0bcb16c08bddcb), ULL(0x3ef83eedc67cd33e), ULL(0x05140528110a2d05), ULL(0x6781671fe6ce7867),
    ULL(0xe4b7e47353d597e4), ULL(0x279c2725bb4e0227), ULL(0x4119413258827341), ULL(0x8b168b2c9d0ba78b),
    ULL(0xa7a6a7510153f6a7), ULL(0x7de97dcf94fab27d), ULL(0x956e95dcfb374995), ULL(0xd847d88e9fad56d8),
    ULL(0xfbcbfb8b30eb70fb), ULL(0xee9fee2371c1cdee), ULL(0x7ced7cc791f8bb7c), ULL(0x66856617e3cc7166),
    ULL(0xdd53dda68ea77bdd), ULL(0x175c17b84b2eaf17), ULL(0x47014702468e4547), ULL(0x9e429e84dc211a9e),
    ULL(0xca0fca1ec589d4ca), ULL(0x2db42d75995a582d), ULL(0xbfc6bf9179632ebf), ULL(0x071c07381b0e3f07),
    ULL(0xad8ead012347acad), ULL(0x5a755aea2fb4b05a), ULL(0x8336836cb51bef83), ULL(0x33cc3385ff66b633),
    ULL(0x6391633ff2c65c63), ULL(0x020802100a041202), ULL(0xaa92aa39384993aa), ULL(0x71d971afa8e2de71),
    ULL(0xc807c80ecf8dc6c8), ULL(0x196419c87d32d119), ULL(0x4939497270923b49), ULL(0xd943d9869aaf5fd9),
    ULL(0xf2eff2c31df931f2), ULL(0xe3abe34b48dba8e3), ULL(0x5b715be22ab6b95b), ULL(0x881a8834920dbc88),
    ULL(0x9a529aa4c8293e9a), ULL(0x2698262dbe4c0b26), ULL(0x32c8328dfa64bf32), ULL(0xb0fab0e94a7d59b0),
    ULL(0xe983e91b6acff2e9), ULL(0x0f3c0f78331e770f), ULL(0xd573d5e6a6b733d5), ULL(0x803a8074ba1df480),
    ULL(0xbec2be997c6127be), ULL(0xcd13cd26de87ebcd), ULL(0x34d034bde4688934), ULL(0x483d487a75903248),
    ULL(0xffdbffab24e354ff), ULL(0x7af57af78ff48d7a), ULL(0x907a90f4ea3d6490), ULL(0x5f615fc23ebe9d5f),
    ULL(0x2080201da0403d20), ULL(0x68bd6867d5d00f68), ULL(0x1a681ad07234ca1a), ULL(0xae82ae192c41b7ae),
    ULL(0xb4eab4c95e757db4), ULL(0x544d549a19a8ce54), ULL(0x937693ece53b7f93), ULL(0x2288220daa442f22),
    ULL(0x648d6407e9c86364), ULL(0xf1e3f1db12ff2af1), ULL(0x73d173bfa2e6cc73), ULL(0x124812905a248212),
    ULL(0x401d403a5d807a40), ULL(0x0820084028104808), ULL(0xc32bc356e89b95c3), ULL(0xec97ec337bc5dfec),
    ULL(0xdb4bdb9690ab4ddb), ULL(0xa1bea1611f5fc0a1), ULL(0x8d0e8d1c8307918d), ULL(0x3df43df5c97ac83d),
    ULL(0x976697ccf1335b97), ULL(0x0000000000000000), ULL(0xcf1bcf36d483f9cf), ULL(0x2bac2b4587566e2b),
    ULL(0x76c57697b3ece176), ULL(0x82328264b019e682), ULL(0xd67fd6fea9b128d6), ULL(0x1b6c1bd87736c31b),
    ULL(0xb5eeb5c15b7774b5), ULL(0xaf86af112943beaf), ULL(0x6ab56a77dfd41d6a), ULL(0x505d50ba0da0ea50),
    ULL(0x450945124c8a5745), ULL(0xf3ebf3cb18fb38f3), ULL(0x30c0309df060ad30), ULL(0xef9bef2b74c3c4ef),
    ULL(0x3ffc3fe5c37eda3f), ULL(0x554955921caac755), ULL(0xa2b2a2791059dba2), ULL(0xea8fea0365c9e9ea),
    ULL(0x6589650fecca6a65), ULL(0xbad2bab9686903ba), ULL(0x2fbc2f65935e4a2f), ULL(0xc027c04ee79d8ec0),
    ULL(0xde5fdebe81a160de), ULL(0x1c701ce06c38fc1c), ULL(0xfdd3fdbb2ee746fd), ULL(0x4d294d52649a1f4d),
    ULL(0x927292e4e0397692), ULL(0x75c9758fbceafa75), ULL(0x061806301e0c3606), ULL(0x8a128a249809ae8a),
    ULL(0xb2f2b2f940794bb2), ULL(0xe6bfe66359d185e6), ULL(0x0e380e70361c7e0e), ULL(0x1f7c1ff8633ee71f),
    ULL(0x62956237f7c45562), ULL(0xd477d4eea3b53ad4), ULL(0xa89aa829324d81a8), ULL(0x966296c4f4315296),
    ULL(0xf9c3f99b3aef62f9), ULL(0xc533c566f697a3c5), ULL(0x25942535b14a1025), ULL(0x597959f220b2ab59),
    ULL(0x842a8454ae15d084), ULL(0x72d572b7a7e4c572), ULL(0x39e439d5dd72ec39), ULL(0x4c2d4c5a6198164c),
    ULL(0x5e655eca3bbc945e), ULL(0x78fd78e785f09f78), ULL(0x38e038ddd870e538), ULL(0x8c0a8c148605988c),
    ULL(0xd163d1c6b2bf17d1), ULL(0xa5aea5410b57e4a5), ULL(0xe2afe2434dd9a1e2), ULL(0x6199612ff8c24e61),
    ULL(0xb3f6b3f1457b42b3), ULL(0x21842115a5423421), ULL(0x9c4a9c94d625089c), ULL(0x1e781ef0663cee1e),
    ULL(0x4311432252866143), ULL(0xc73bc776fc93b1c7), ULL(0xfcd7fcb32be54ffc), ULL(0x0410042014082404),
    ULL(0x515951b208a2e351), ULL(0x995e99bcc72f2599), ULL(0x6da96d4fc4da226d), ULL(0x0d340d68391a650d),
    ULL(0xfacffa8335e979fa), ULL(0xdf5bdfb684a369df), ULL(0x7ee57ed79bfca97e), ULL(0x2490243db4481924),
    ULL(0x3bec3bc5d776fe3b), ULL(0xab96ab313d4b9aab), ULL(0xce1fce3ed181f0ce), ULL(0x1144118855229911),
    ULL(0x8f068f0c8903838f), ULL(0x4e254e4a6b9c044e), ULL(0xb7e6b7d1517366b7), ULL(0xeb8beb0b60cbe0eb),
    ULL(0x3cf03cfdcc78c13c), ULL(0x813e817cbf1ffd81), ULL(0x946a94d4fe354094), ULL(0xf7fbf7eb0cf31cf7),
    ULL(0xb9deb9a1676f18b9), ULL(0x134c13985f268b13), ULL(0x2cb02c7d9c58512c), ULL(0xd36bd3d6b8bb05d3),
    ULL(0xe7bbe76b5cd38ce7), ULL(0x6ea56e57cbdc396e), ULL(0xc437c46ef395aac4), ULL(0x030c03180f061b03),
    ULL(0x5645568a13acdc56), ULL(0x440d441a49885e44), ULL(0x7fe17fdf9efea07f), ULL(0xa99ea921374f88a9),
    ULL(0x2aa82a4d8254672a), ULL(0xbbd6bbb16d6b0abb), ULL(0xc123c146e29f87c1), ULL(0x535153a202a6f153),
    ULL(0xdc57dcae8ba572dc), ULL(0x0b2c0b582716530b), ULL(0x9d4e9d9cd327019d), ULL(0x6cad6c47c1d82b6c),
    ULL(0x31c43195f562a431), ULL(0x74cd7487b9e8f374), ULL(0xf6fff6e309f115f6), ULL(0x4605460a438c4c46),
    ULL(0xac8aac092645a5ac), ULL(0x891e893c970fb589), ULL(0x145014a04428b414), ULL(0xe1a3e15b42dfbae1),
    ULL(0x165816b04e2ca616), ULL(0x3ae83acdd274f73a), ULL(0x69b9696fd0d20669), ULL(0x092409482d124109),
    ULL(0x70dd70a7ade0d770), ULL(0xb6e2b6d954716fb6), ULL(0xd067d0ceb7bd1ed0), ULL(0xed93ed3b7ec7d6ed),
    ULL(0xcc17cc2edb85e2cc), ULL(0x4215422a57846842), ULL(0x985a98b4c22d2c98), ULL(0xa4aaa4490e55eda4),
    ULL(0x28a0285d88507528), ULL(0x5c6d5cda31b8865c), ULL(0xf8c7f8933fed6bf8), ULL(0x86228644a411c286),
};

#ifdef OBSOLETE
static const uint64_t C0[256] = {
    ULL(0x1818281878c0d878), ULL(0x23236523af0526af), ULL(0xc6c657c6f97eb8f9), ULL(0xe8e825e86f13fb6f),
    ULL(0x87879487a14ccba1), ULL(0xb8b8d5b862a91162), ULL(0x0101030105080905), ULL(0x4f4fd14f6e420d6e),
    ULL(0x36365a36eead9bee), ULL(0xa6a6f7a60459ff04), ULL(0xd2d26bd2bdde0cbd), ULL(0xf5f502f506fb0e06),
    ULL(0x79798b7980ef9680), ULL(0x6f6fb16fce5f30ce), ULL(0x9191ae91effc6def), ULL(0x5252f65207aaf807),
    ULL(0x6060a060fd2747fd), ULL(0xbcbcd9bc76893576), ULL(0x9b9bb09bcdac37cd), ULL(0x8e8e8f8e8c048a8c),
    ULL(0xa3a3f8a31571d215), ULL(0x0c0c140c3c606c3c), ULL(0x7b7b8d7b8aff848a), ULL(0x35355f35e1b580e1),
    ULL(0x1d1d271d69e8f569), ULL(0xe0e03de04753b347), ULL(0xd7d764d7acf621ac), ULL(0xc2c25bc2ed5e9ced),
    ULL(0x2e2e722e966d4396), ULL(0x4b4bdd4b7a62297a), ULL(0xfefe1ffe21a35d21), ULL(0x5757f9571682d516),
    ULL(0x15153f1541a8bd41), ULL(0x77779977b69fe8b6), ULL(0x37375937eba592eb), ULL(0xe5e532e5567b9e56),
    ULL(0x9f9fbc9fd98c13d9), ULL(0xf0f00df017d32317), ULL(0x4a4ade4a7f6a207f), ULL(0xdada73da959e4495),
    ULL(0x5858e85825faa225), ULL(0xc9c946c9ca06cfca), ULL(0x29297b298d557c8d), ULL(0x0a0a1e0a22505a22),
    ULL(0xb1b1ceb14fe1504f), ULL(0xa0a0fda01a69c91a), ULL(0x6b6bbd6bda7f14da), ULL(0x85859285ab5cd9ab),
    ULL(0xbdbddabd73813c73), ULL(0x5d5de75d34d28f34), ULL(0x1010301050809050), ULL(0xf4f401f403f30703),
    ULL(0xcbcb40cbc016ddc0), ULL(0x3e3e423ec6edd3c6), ULL(0x05050f0511282d11), ULL(0x6767a967e61f78e6),
    ULL(0xe4e431e453739753), ULL(0x27276927bb2502bb), ULL(0x4141c34158327358), ULL(0x8b8b808b9d2ca79d),
    ULL(0xa7a7f4a70151f601), ULL(0x7d7d877d94cfb294), ULL(0x9595a295fbdc49fb), ULL(0xd8d875d89f8e569f),
    ULL(0xfbfb10fb308b7030), ULL(0xeeee2fee7123cd71), ULL(0x7c7c847c91c7bb91), ULL(0x6666aa66e31771e3),
    ULL(0xdddd7add8ea67b8e), ULL(0x171739174bb8af4b), ULL(0x4747c94746024546), ULL(0x9e9ebf9edc841adc),
    ULL(0xcaca43cac51ed4c5), ULL(0x2d2d772d99755899), ULL(0xbfbfdcbf79912e79), ULL(0x070709071b383f1b),
    ULL(0xadadeaad2301ac23), ULL(0x5a5aee5a2feab02f), ULL(0x83839883b56cefb5), ULL(0x33335533ff85b6ff),
    ULL(0x6363a563f23f5cf2), ULL(0x020206020a10120a), ULL(0xaaaae3aa38399338), ULL(0x71719371a8afdea8),
    ULL(0xc8c845c8cf0ec6cf), ULL(0x19192b197dc8d17d), ULL(0x4949db4970723b70), ULL(0xd9d976d99a865f9a),
    ULL(0xf2f20bf21dc3311d), ULL(0xe3e338e3484ba848), ULL(0x5b5bed5b2ae2b92a), ULL(0x888885889234bc92),
    ULL(0x9a9ab39ac8a43ec8), ULL(0x26266a26be2d0bbe), ULL(0x32325632fa8dbffa), ULL(0xb0b0cdb04ae9594a),
    ULL(0xe9e926e96a1bf26a), ULL(0x0f0f110f33787733), ULL(0xd5d562d5a6e633a6), ULL(0x80809d80ba74f4ba),
    ULL(0xbebedfbe7c99277c), ULL(0xcdcd4acdde26ebde), ULL(0x34345c34e4bd89e4), ULL(0x4848d848757a3275),
    ULL(0xffff1cff24ab5424), ULL(0x7a7a8e7a8ff78d8f), ULL(0x9090ad90eaf464ea), ULL(0x5f5fe15f3ec29d3e),
    ULL(0x20206020a01d3da0), ULL(0x6868b868d5670fd5), ULL(0x1a1a2e1a72d0ca72), ULL(0xaeaeefae2c19b72c),
    ULL(0xb4b4c1b45ec97d5e), ULL(0x5454fc54199ace19), ULL(0x9393a893e5ec7fe5), ULL(0x22226622aa0d2faa),
    ULL(0x6464ac64e90763e9), ULL(0xf1f10ef112db2a12), ULL(0x73739573a2bfcca2), ULL(0x121236125a90825a),
    ULL(0x4040c0405d3a7a5d), ULL(0x0808180828404828), ULL(0xc3c358c3e85695e8), ULL(0xecec29ec7b33df7b),
    ULL(0xdbdb70db90964d90), ULL(0xa1a1fea11f61c01f), ULL(0x8d8d8a8d831c9183), ULL(0x3d3d473dc9f5c8c9),
    ULL(0x9797a497f1cc5bf1), ULL(0x0000000000000000), ULL(0xcfcf4ccfd436f9d4), ULL(0x2b2b7d2b87456e87),
    ULL(0x76769a76b397e1b3), ULL(0x82829b82b064e6b0), ULL(0xd6d667d6a9fe28a9), ULL(0x1b1b2d1b77d8c377),
    ULL(0xb5b5c2b55bc1745b), ULL(0xafafecaf2911be29), ULL(0x6a6abe6adf771ddf), ULL(0x5050f0500dbaea0d),
    ULL(0x4545cf454c12574c), ULL(0xf3f308f318cb3818), ULL(0x30305030f09dadf0), ULL(0xefef2cef742bc474),
    ULL(0x3f3f413fc3e5dac3), ULL(0x5555ff551c92c71c), ULL(0xa2a2fba21079db10), ULL(0xeaea23ea6503e965),
    ULL(0x6565af65ec0f6aec), ULL(0xbabad3ba68b90368), ULL(0x2f2f712f93654a93), ULL(0xc0c05dc0e74e8ee7),
    ULL(0xdede7fde81be6081), ULL(0x1c1c241c6ce0fc6c), ULL(0xfdfd1afd2ebb462e), ULL(0x4d4dd74d64521f64),
    ULL(0x9292ab92e0e476e0), ULL(0x75759f75bc8ffabc), ULL(0x06060a061e30361e), ULL(0x8a8a838a9824ae98),
    ULL(0xb2b2cbb240f94b40), ULL(0xe6e637e659638559), ULL(0x0e0e120e36707e36), ULL(0x1f1f211f63f8e763),
    ULL(0x6262a662f73755f7), ULL(0xd4d461d4a3ee3aa3), ULL(0xa8a8e5a832298132), ULL(0x9696a796f4c452f4),
    ULL(0xf9f916f93a9b623a), ULL(0xc5c552c5f666a3f6), ULL(0x25256f25b13510b1), ULL(0x5959eb5920f2ab20),
    ULL(0x84849184ae54d0ae), ULL(0x72729672a7b7c5a7), ULL(0x39394b39ddd5ecdd), ULL(0x4c4cd44c615a1661),
    ULL(0x5e5ee25e3bca943b), ULL(0x7878887885e79f85), ULL(0x38384838d8dde5d8), ULL(0x8c8c898c86149886),
    ULL(0xd1d16ed1b2c617b2), ULL(0xa5a5f2a50b41e40b), ULL(0xe2e23be24d43a14d), ULL(0x6161a361f82f4ef8),
    ULL(0xb3b3c8b345f14245), ULL(0x21216321a51534a5), ULL(0x9c9cb99cd69408d6), ULL(0x1e1e221e66f0ee66),
    ULL(0x4343c54352226152), ULL(0xc7c754c7fc76b1fc), ULL(0xfcfc19fc2bb34f2b), ULL(0x04040c0414202414),
    ULL(0x5151f35108b2e308), ULL(0x9999b699c7bc25c7), ULL(0x6d6db76dc44f22c4), ULL(0x0d0d170d39686539),
    ULL(0xfafa13fa35837935), ULL(0xdfdf7cdf84b66984), ULL(0x7e7e827e9bd7a99b), ULL(0x24246c24b43d19b4),
    ULL(0x3b3b4d3bd7c5fed7), ULL(0xababe0ab3d319a3d), ULL(0xcece4fced13ef0d1), ULL(0x1111331155889955),
    ULL(0x8f8f8c8f890c8389), ULL(0x4e4ed24e6b4a046b), ULL(0xb7b7c4b751d16651), ULL(0xebeb20eb600be060),
    ULL(0x3c3c443cccfdc1cc), ULL(0x81819e81bf7cfdbf), ULL(0x9494a194fed440fe), ULL(0xf7f704f70ceb1c0c),
    ULL(0xb9b9d6b967a11867), ULL(0x131335135f988b5f), ULL(0x2c2c742c9c7d519c), ULL(0xd3d368d3b8d605b8),
    ULL(0xe7e734e75c6b8c5c), ULL(0x6e6eb26ecb5739cb), ULL(0xc4c451c4f36eaaf3), ULL(0x030305030f181b0f),
    ULL(0x5656fa56138adc13), ULL(0x4444cc44491a5e49), ULL(0x7f7f817f9edfa09e), ULL(0xa9a9e6a937218837),
    ULL(0x2a2a7e2a824d6782), ULL(0xbbbbd0bb6db10a6d), ULL(0xc1c15ec1e24687e2), ULL(0x5353f55302a2f102),
    ULL(0xdcdc79dc8bae728b), ULL(0x0b0b1d0b27585327), ULL(0x9d9dba9dd39c01d3), ULL(0x6c6cb46cc1472bc1),
    ULL(0x31315331f595a4f5), ULL(0x74749c74b987f3b9), ULL(0xf6f607f609e31509), ULL(0x4646ca46430a4c43),
    ULL(0xacace9ac2609a526), ULL(0x89898689973cb597), ULL(0x14143c1444a0b444), ULL(0xe1e13ee1425bba42),
    ULL(0x16163a164eb0a64e), ULL(0x3a3a4e3ad2cdf7d2), ULL(0x6969bb69d06f06d0), ULL(0x09091b092d48412d),
    ULL(0x70709070ada7d7ad), ULL(0xb6b6c7b654d96f54), ULL(0xd0d06dd0b7ce1eb7), ULL(0xeded2aed7e3bd67e),
    ULL(0xcccc49ccdb2ee2db), ULL(0x4242c642572a6857), ULL(0x9898b598c2b42cc2), ULL(0xa4a4f1a40e49ed0e),
    ULL(0x28287828885d7588), ULL(0x5c5ce45c31da8631), ULL(0xf8f815f83f936b3f), ULL(0x86869786a444c2a4),
};

static const uint64_t C1[256] = {
    ULL(0x781818281878c0d8), ULL(0xaf23236523af0526), ULL(0xf9c6c657c6f97eb8), ULL(0x6fe8e825e86f13fb),
    ULL(0xa187879487a14ccb), ULL(0x62b8b8d5b862a911), ULL(0x0501010301050809), ULL(0x6e4f4fd14f6e420d),
    ULL(0xee36365a36eead9b), ULL(0x04a6a6f7a60459ff), ULL(0xbdd2d26bd2bdde0c), ULL(0x06f5f502f506fb0e),
    ULL(0x8079798b7980ef96), ULL(0xce6f6fb16fce5f30), ULL(0xef9191ae91effc6d), ULL(0x075252f65207aaf8),
    ULL(0xfd6060a060fd2747), ULL(0x76bcbcd9bc768935), ULL(0xcd9b9bb09bcdac37), ULL(0x8c8e8e8f8e8c048a),
    ULL(0x15a3a3f8a31571d2), ULL(0x3c0c0c140c3c606c), ULL(0x8a7b7b8d7b8aff84), ULL(0xe135355f35e1b580),
    ULL(0x691d1d271d69e8f5), ULL(0x47e0e03de04753b3), ULL(0xacd7d764d7acf621), ULL(0xedc2c25bc2ed5e9c),
    ULL(0x962e2e722e966d43), ULL(0x7a4b4bdd4b7a6229), ULL(0x21fefe1ffe21a35d), ULL(0x165757f9571682d5),
    ULL(0x4115153f1541a8bd), ULL(0xb677779977b69fe8), ULL(0xeb37375937eba592), ULL(0x56e5e532e5567b9e),
    ULL(0xd99f9fbc9fd98c13), ULL(0x17f0f00df017d323), ULL(0x7f4a4ade4a7f6a20), ULL(0x95dada73da959e44),
    ULL(0x255858e85825faa2), ULL(0xcac9c946c9ca06cf), ULL(0x8d29297b298d557c), ULL(0x220a0a1e0a22505a),
    ULL(0x4fb1b1ceb14fe150), ULL(0x1aa0a0fda01a69c9), ULL(0xda6b6bbd6bda7f14), ULL(0xab85859285ab5cd9),
    ULL(0x73bdbddabd73813c), ULL(0x345d5de75d34d28f), ULL(0x5010103010508090), ULL(0x03f4f401f403f307),
    ULL(0xc0cbcb40cbc016dd), ULL(0xc63e3e423ec6edd3), ULL(0x1105050f0511282d), ULL(0xe66767a967e61f78),
    ULL(0x53e4e431e4537397), ULL(0xbb27276927bb2502), ULL(0x584141c341583273), ULL(0x9d8b8b808b9d2ca7),
    ULL(0x01a7a7f4a70151f6), ULL(0x947d7d877d94cfb2), ULL(0xfb9595a295fbdc49), ULL(0x9fd8d875d89f8e56),
    ULL(0x30fbfb10fb308b70), ULL(0x71eeee2fee7123cd), ULL(0x917c7c847c91c7bb), ULL(0xe36666aa66e31771),
    ULL(0x8edddd7add8ea67b), ULL(0x4b171739174bb8af), ULL(0x464747c947460245), ULL(0xdc9e9ebf9edc841a),
    ULL(0xc5caca43cac51ed4), ULL(0x992d2d772d997558), ULL(0x79bfbfdcbf79912e), ULL(0x1b070709071b383f),
    ULL(0x23adadeaad2301ac), ULL(0x2f5a5aee5a2feab0), ULL(0xb583839883b56cef), ULL(0xff33335533ff85b6),
    ULL(0xf26363a563f23f5c), ULL(0x0a020206020a1012), ULL(0x38aaaae3aa383993), ULL(0xa871719371a8afde),
    ULL(0xcfc8c845c8cf0ec6), ULL(0x7d19192b197dc8d1), ULL(0x704949db4970723b), ULL(0x9ad9d976d99a865f),
    ULL(0x1df2f20bf21dc331), ULL(0x48e3e338e3484ba8), ULL(0x2a5b5bed5b2ae2b9), ULL(0x92888885889234bc),
    ULL(0xc89a9ab39ac8a43e), ULL(0xbe26266a26be2d0b), ULL(0xfa32325632fa8dbf), ULL(0x4ab0b0cdb04ae959),
    ULL(0x6ae9e926e96a1bf2), ULL(0x330f0f110f337877), ULL(0xa6d5d562d5a6e633), ULL(0xba80809d80ba74f4),
    ULL(0x7cbebedfbe7c9927), ULL(0xdecdcd4acdde26eb), ULL(0xe434345c34e4bd89), ULL(0x754848d848757a32),
    ULL(0x24ffff1cff24ab54), ULL(0x8f7a7a8e7a8ff78d), ULL(0xea9090ad90eaf464), ULL(0x3e5f5fe15f3ec29d),
    ULL(0xa020206020a01d3d), ULL(0xd56868b868d5670f), ULL(0x721a1a2e1a72d0ca), ULL(0x2caeaeefae2c19b7),
    ULL(0x5eb4b4c1b45ec97d), ULL(0x195454fc54199ace), ULL(0xe59393a893e5ec7f), ULL(0xaa22226622aa0d2f),
    ULL(0xe96464ac64e90763), ULL(0x12f1f10ef112db2a), ULL(0xa273739573a2bfcc), ULL(0x5a121236125a9082),
    ULL(0x5d4040c0405d3a7a), ULL(0x2808081808284048), ULL(0xe8c3c358c3e85695), ULL(0x7becec29ec7b33df),
    ULL(0x90dbdb70db90964d), ULL(0x1fa1a1fea11f61c0), ULL(0x838d8d8a8d831c91), ULL(0xc93d3d473dc9f5c8),
    ULL(0xf19797a497f1cc5b), ULL(0x0000000000000000), ULL(0xd4cfcf4ccfd436f9), ULL(0x872b2b7d2b87456e),
    ULL(0xb376769a76b397e1), ULL(0xb082829b82b064e6), ULL(0xa9d6d667d6a9fe28), ULL(0x771b1b2d1b77d8c3),
    ULL(0x5bb5b5c2b55bc174), ULL(0x29afafecaf2911be), ULL(0xdf6a6abe6adf771d), ULL(0x0d5050f0500dbaea),
    ULL(0x4c4545cf454c1257), ULL(0x18f3f308f318cb38), ULL(0xf030305030f09dad), ULL(0x74efef2cef742bc4),
    ULL(0xc33f3f413fc3e5da), ULL(0x1c5555ff551c92c7), ULL(0x10a2a2fba21079db), ULL(0x65eaea23ea6503e9),
    ULL(0xec6565af65ec0f6a), ULL(0x68babad3ba68b903), ULL(0x932f2f712f93654a), ULL(0xe7c0c05dc0e74e8e),
    ULL(0x81dede7fde81be60), ULL(0x6c1c1c241c6ce0fc), ULL(0x2efdfd1afd2ebb46), ULL(0x644d4dd74d64521f),
    ULL(0xe09292ab92e0e476), ULL(0xbc75759f75bc8ffa), ULL(0x1e06060a061e3036), ULL(0x988a8a838a9824ae),
    ULL(0x40b2b2cbb240f94b), ULL(0x59e6e637e6596385), ULL(0x360e0e120e36707e), ULL(0x631f1f211f63f8e7),
    ULL(0xf76262a662f73755), ULL(0xa3d4d461d4a3ee3a), ULL(0x32a8a8e5a8322981), ULL(0xf49696a796f4c452),
    ULL(0x3af9f916f93a9b62), ULL(0xf6c5c552c5f666a3), ULL(0xb125256f25b13510), ULL(0x205959eb5920f2ab),
    ULL(0xae84849184ae54d0), ULL(0xa772729672a7b7c5), ULL(0xdd39394b39ddd5ec), ULL(0x614c4cd44c615a16),
    ULL(0x3b5e5ee25e3bca94), ULL(0x857878887885e79f), ULL(0xd838384838d8dde5), ULL(0x868c8c898c861498),
    ULL(0xb2d1d16ed1b2c617), ULL(0x0ba5a5f2a50b41e4), ULL(0x4de2e23be24d43a1), ULL(0xf86161a361f82f4e),
    ULL(0x45b3b3c8b345f142), ULL(0xa521216321a51534), ULL(0xd69c9cb99cd69408), ULL(0x661e1e221e66f0ee),
    ULL(0x524343c543522261), ULL(0xfcc7c754c7fc76b1), ULL(0x2bfcfc19fc2bb34f), ULL(0x1404040c04142024),
    ULL(0x085151f35108b2e3), ULL(0xc79999b699c7bc25), ULL(0xc46d6db76dc44f22), ULL(0x390d0d170d396865),
    ULL(0x35fafa13fa358379), ULL(0x84dfdf7cdf84b669), ULL(0x9b7e7e827e9bd7a9), ULL(0xb424246c24b43d19),
    ULL(0xd73b3b4d3bd7c5fe), ULL(0x3dababe0ab3d319a), ULL(0xd1cece4fced13ef0), ULL(0x5511113311558899),
    ULL(0x898f8f8c8f890c83), ULL(0x6b4e4ed24e6b4a04), ULL(0x51b7b7c4b751d166), ULL(0x60ebeb20eb600be0),
    ULL(0xcc3c3c443cccfdc1), ULL(0xbf81819e81bf7cfd), ULL(0xfe9494a194fed440), ULL(0x0cf7f704f70ceb1c),
    ULL(0x67b9b9d6b967a118), ULL(0x5f131335135f988b), ULL(0x9c2c2c742c9c7d51), ULL(0xb8d3d368d3b8d605),
    ULL(0x5ce7e734e75c6b8c), ULL(0xcb6e6eb26ecb5739), ULL(0xf3c4c451c4f36eaa), ULL(0x0f030305030f181b),
    ULL(0x135656fa56138adc), ULL(0x494444cc44491a5e), ULL(0x9e7f7f817f9edfa0), ULL(0x37a9a9e6a9372188),
    ULL(0x822a2a7e2a824d67), ULL(0x6dbbbbd0bb6db10a), ULL(0xe2c1c15ec1e24687), ULL(0x025353f55302a2f1),
    ULL(0x8bdcdc79dc8bae72), ULL(0x270b0b1d0b275853), ULL(0xd39d9dba9dd39c01), ULL(0xc16c6cb46cc1472b),
    ULL(0xf531315331f595a4), ULL(0xb974749c74b987f3), ULL(0x09f6f607f609e315), ULL(0x434646ca46430a4c),
    ULL(0x26acace9ac2609a5), ULL(0x9789898689973cb5), ULL(0x4414143c1444a0b4), ULL(0x42e1e13ee1425bba),
    ULL(0x4e16163a164eb0a6), ULL(0xd23a3a4e3ad2cdf7), ULL(0xd06969bb69d06f06), ULL(0x2d09091b092d4841),
    ULL(0xad70709070ada7d7), ULL(0x54b6b6c7b654d96f), ULL(0xb7d0d06dd0b7ce1e), ULL(0x7eeded2aed7e3bd6),
    ULL(0xdbcccc49ccdb2ee2), ULL(0x574242c642572a68), ULL(0xc29898b598c2b42c), ULL(0x0ea4a4f1a40e49ed),
    ULL(0x8828287828885d75), ULL(0x315c5ce45c31da86), ULL(0x3ff8f815f83f936b), ULL(0xa486869786a444c2),
};

static const uint64_t C2[256] = {
    ULL(0xd8781818281878c0), ULL(0x26af23236523af05), ULL(0xb8f9c6c657c6f97e), ULL(0xfb6fe8e825e86f13),
    ULL(0xcba187879487a14c), ULL(0x1162b8b8d5b862a9), ULL(0x0905010103010508), ULL(0x0d6e4f4fd14f6e42),
    ULL(0x9bee36365a36eead), ULL(0xff04a6a6f7a60459), ULL(0x0cbdd2d26bd2bdde), ULL(0x0e06f5f502f506fb),
    ULL(0x968079798b7980ef), ULL(0x30ce6f6fb16fce5f), ULL(0x6def9191ae91effc), ULL(0xf8075252f65207aa),
    ULL(0x47fd6060a060fd27), ULL(0x3576bcbcd9bc7689), ULL(0x37cd9b9bb09bcdac), ULL(0x8a8c8e8e8f8e8c04),
    ULL(0xd215a3a3f8a31571), ULL(0x6c3c0c0c140c3c60), ULL(0x848a7b7b8d7b8aff), ULL(0x80e135355f35e1b5),
    ULL(0xf5691d1d271d69e8), ULL(0xb347e0e03de04753), ULL(0x21acd7d764d7acf6), ULL(0x9cedc2c25bc2ed5e),
    ULL(0x43962e2e722e966d), ULL(0x297a4b4bdd4b7a62), ULL(0x5d21fefe1ffe21a3), ULL(0xd5165757f9571682),
    ULL(0xbd4115153f1541a8), ULL(0xe8b677779977b69f), ULL(0x92eb37375937eba5), ULL(0x9e56e5e532e5567b),
    ULL(0x13d99f9fbc9fd98c), ULL(0x2317f0f00df017d3), ULL(0x207f4a4ade4a7f6a), ULL(0x4495dada73da959e),
    ULL(0xa2255858e85825fa), ULL(0xcfcac9c946c9ca06), ULL(0x7c8d29297b298d55), ULL(0x5a220a0a1e0a2250),
    ULL(0x504fb1b1ceb14fe1), ULL(0xc91aa0a0fda01a69), ULL(0x14da6b6bbd6bda7f), ULL(0xd9ab85859285ab5c),
    ULL(0x3c73bdbddabd7381), ULL(0x8f345d5de75d34d2), ULL(0x9050101030105080), ULL(0x0703f4f401f403f3),
    ULL(0xddc0cbcb40cbc016), ULL(0xd3c63e3e423ec6ed), ULL(0x2d1105050f051128), ULL(0x78e66767a967e61f),
    ULL(0x9753e4e431e45373), ULL(0x02bb27276927bb25), ULL(0x73584141c3415832), ULL(0xa79d8b8b808b9d2c),
    ULL(0xf601a7a7f4a70151), ULL(0xb2947d7d877d94cf), ULL(0x49fb9595a295fbdc), ULL(0x569fd8d875d89f8e),
    ULL(0x7030fbfb10fb308b), ULL(0xcd71eeee2fee7123), ULL(0xbb917c7c847c91c7), ULL(0x71e36666aa66e317),
    ULL(0x7b8edddd7add8ea6), ULL(0xaf4b171739174bb8), ULL(0x45464747c9474602), ULL(0x1adc9e9ebf9edc84),
    ULL(0xd4c5caca43cac51e), ULL(0x58992d2d772d9975), ULL(0x2e79bfbfdcbf7991), ULL(0x3f1b070709071b38),
    ULL(0xac23adadeaad2301), ULL(0xb02f5a5aee5a2fea), ULL(0xefb583839883b56c), ULL(0xb6ff33335533ff85),
    ULL(0x5cf26363a563f23f), ULL(0x120a020206020a10), ULL(0x9338aaaae3aa3839), ULL(0xdea871719371a8af),
    ULL(0xc6cfc8c845c8cf0e), ULL(0xd17d19192b197dc8), ULL(0x3b704949db497072), ULL(0x5f9ad9d976d99a86),
    ULL(0x311df2f20bf21dc3), ULL(0xa848e3e338e3484b), ULL(0xb92a5b5bed5b2ae2), ULL(0xbc92888885889234),
    ULL(0x3ec89a9ab39ac8a4), ULL(0x0bbe26266a26be2d), ULL(0xbffa32325632fa8d), ULL(0x594ab0b0cdb04ae9),
    ULL(0xf26ae9e926e96a1b), ULL(0x77330f0f110f3378), ULL(0x33a6d5d562d5a6e6), ULL(0xf4ba80809d80ba74),
    ULL(0x277cbebedfbe7c99), ULL(0xebdecdcd4acdde26), ULL(0x89e434345c34e4bd), ULL(0x32754848d848757a),
    ULL(0x5424ffff1cff24ab), ULL(0x8d8f7a7a8e7a8ff7), ULL(0x64ea9090ad90eaf4), ULL(0x9d3e5f5fe15f3ec2),
    ULL(0x3da020206020a01d), ULL(0x0fd56868b868d567), ULL(0xca721a1a2e1a72d0), ULL(0xb72caeaeefae2c19),
    ULL(0x7d5eb4b4c1b45ec9), ULL(0xce195454fc54199a), ULL(0x7fe59393a893e5ec), ULL(0x2faa22226622aa0d),
    ULL(0x63e96464ac64e907), ULL(0x2a12f1f10ef112db), ULL(0xcca273739573a2bf), ULL(0x825a121236125a90),
    ULL(0x7a5d4040c0405d3a), ULL(0x4828080818082840), ULL(0x95e8c3c358c3e856), ULL(0xdf7becec29ec7b33),
    ULL(0x4d90dbdb70db9096), ULL(0xc01fa1a1fea11f61), ULL(0x91838d8d8a8d831c), ULL(0xc8c93d3d473dc9f5),
    ULL(0x5bf19797a497f1cc), ULL(0x0000000000000000), ULL(0xf9d4cfcf4ccfd436), ULL(0x6e872b2b7d2b8745),
    ULL(0xe1b376769a76b397), ULL(0xe6b082829b82b064), ULL(0x28a9d6d667d6a9fe), ULL(0xc3771b1b2d1b77d8),
    ULL(0x745bb5b5c2b55bc1), ULL(0xbe29afafecaf2911), ULL(0x1ddf6a6abe6adf77), ULL(0xea0d5050f0500dba),
    ULL(0x574c4545cf454c12), ULL(0x3818f3f308f318cb), ULL(0xadf030305030f09d), ULL(0xc474efef2cef742b),
    ULL(0xdac33f3f413fc3e5), ULL(0xc71c5555ff551c92), ULL(0xdb10a2a2fba21079), ULL(0xe965eaea23ea6503),
    ULL(0x6aec6565af65ec0f), ULL(0x0368babad3ba68b9), ULL(0x4a932f2f712f9365), ULL(0x8ee7c0c05dc0e74e),
    ULL(0x6081dede7fde81be), ULL(0xfc6c1c1c241c6ce0), ULL(0x462efdfd1afd2ebb), ULL(0x1f644d4dd74d6452),
    ULL(0x76e09292ab92e0e4), ULL(0xfabc75759f75bc8f), ULL(0x361e06060a061e30), ULL(0xae988a8a838a9824),
    ULL(0x4b40b2b2cbb240f9), ULL(0x8559e6e637e65963), ULL(0x7e360e0e120e3670), ULL(0xe7631f1f211f63f8),
    ULL(0x55f76262a662f737), ULL(0x3aa3d4d461d4a3ee), ULL(0x8132a8a8e5a83229), ULL(0x52f49696a796f4c4),
    ULL(0x623af9f916f93a9b), ULL(0xa3f6c5c552c5f666), ULL(0x10b125256f25b135), ULL(0xab205959eb5920f2),
    ULL(0xd0ae84849184ae54), ULL(0xc5a772729672a7b7), ULL(0xecdd39394b39ddd5), ULL(0x16614c4cd44c615a),
    ULL(0x943b5e5ee25e3bca), ULL(0x9f857878887885e7), ULL(0xe5d838384838d8dd), ULL(0x98868c8c898c8614),
    ULL(0x17b2d1d16ed1b2c6), ULL(0xe40ba5a5f2a50b41), ULL(0xa14de2e23be24d43), ULL(0x4ef86161a361f82f),
    ULL(0x4245b3b3c8b345f1), ULL(0x34a521216321a515), ULL(0x08d69c9cb99cd694), ULL(0xee661e1e221e66f0),
    ULL(0x61524343c5435222), ULL(0xb1fcc7c754c7fc76), ULL(0x4f2bfcfc19fc2bb3), ULL(0x241404040c041420),
    ULL(0xe3085151f35108b2), ULL(0x25c79999b699c7bc), ULL(0x22c46d6db76dc44f), ULL(0x65390d0d170d3968),
    ULL(0x7935fafa13fa3583), ULL(0x6984dfdf7cdf84b6), ULL(0xa99b7e7e827e9bd7), ULL(0x19b424246c24b43d),
    ULL(0xfed73b3b4d3bd7c5), ULL(0x9a3dababe0ab3d31), ULL(0xf0d1cece4fced13e), ULL(0x9955111133115588),
    ULL(0x83898f8f8c8f890c), ULL(0x046b4e4ed24e6b4a), ULL(0x6651b7b7c4b751d1), ULL(0xe060ebeb20eb600b),
    ULL(0xc1cc3c3c443cccfd), ULL(0xfdbf81819e81bf7c), ULL(0x40fe9494a194fed4), ULL(0x1c0cf7f704f70ceb),
    ULL(0x1867b9b9d6b967a1), ULL(0x8b5f131335135f98), ULL(0x519c2c2c742c9c7d), ULL(0x05b8d3d368d3b8d6),
    ULL(0x8c5ce7e734e75c6b), ULL(0x39cb6e6eb26ecb57), ULL(0xaaf3c4c451c4f36e), ULL(0x1b0f030305030f18),
    ULL(0xdc135656fa56138a), ULL(0x5e494444cc44491a), ULL(0xa09e7f7f817f9edf), ULL(0x8837a9a9e6a93721),
    ULL(0x67822a2a7e2a824d), ULL(0x0a6dbbbbd0bb6db1), ULL(0x87e2c1c15ec1e246), ULL(0xf1025353f55302a2),
    ULL(0x728bdcdc79dc8bae), ULL(0x53270b0b1d0b2758), ULL(0x01d39d9dba9dd39c), ULL(0x2bc16c6cb46cc147),
    ULL(0xa4f531315331f595), ULL(0xf3b974749c74b987), ULL(0x1509f6f607f609e3), ULL(0x4c434646ca46430a),
    ULL(0xa526acace9ac2609), ULL(0xb59789898689973c), ULL(0xb44414143c1444a0), ULL(0xba42e1e13ee1425b),
    ULL(0xa64e16163a164eb0), ULL(0xf7d23a3a4e3ad2cd), ULL(0x06d06969bb69d06f), ULL(0x412d09091b092d48),
    ULL(0xd7ad70709070ada7), ULL(0x6f54b6b6c7b654d9), ULL(0x1eb7d0d06dd0b7ce), ULL(0xd67eeded2aed7e3b),
    ULL(0xe2dbcccc49ccdb2e), ULL(0x68574242c642572a), ULL(0x2cc29898b598c2b4), ULL(0xed0ea4a4f1a40e49),
    ULL(0x758828287828885d), ULL(0x86315c5ce45c31da), ULL(0x6b3ff8f815f83f93), ULL(0xc2a486869786a444),
};

static const uint64_t C3[256] = {
    ULL(0xc0d8781818281878), ULL(0x0526af23236523af), ULL(0x7eb8f9c6c657c6f9), ULL(0x13fb6fe8e825e86f),
    ULL(0x4ccba187879487a1), ULL(0xa91162b8b8d5b862), ULL(0x0809050101030105), ULL(0x420d6e4f4fd14f6e),
    ULL(0xad9bee36365a36ee), ULL(0x59ff04a6a6f7a604), ULL(0xde0cbdd2d26bd2bd), ULL(0xfb0e06f5f502f506),
    ULL(0xef968079798b7980), ULL(0x5f30ce6f6fb16fce), ULL(0xfc6def9191ae91ef), ULL(0xaaf8075252f65207),
    ULL(0x2747fd6060a060fd), ULL(0x893576bcbcd9bc76), ULL(0xac37cd9b9bb09bcd), ULL(0x048a8c8e8e8f8e8c),
    ULL(0x71d215a3a3f8a315), ULL(0x606c3c0c0c140c3c), ULL(0xff848a7b7b8d7b8a), ULL(0xb580e135355f35e1),
    ULL(0xe8f5691d1d271d69), ULL(0x53b347e0e03de047), ULL(0xf621acd7d764d7ac), ULL(0x5e9cedc2c25bc2ed),
    ULL(0x6d43962e2e722e96), ULL(0x62297a4b4bdd4b7a), ULL(0xa35d21fefe1ffe21), ULL(0x82d5165757f95716),
    ULL(0xa8bd4115153f1541), ULL(0x9fe8b677779977b6), ULL(0xa592eb37375937eb), ULL(0x7b9e56e5e532e556),
    ULL(0x8c13d99f9fbc9fd9), ULL(0xd32317f0f00df017), ULL(0x6a207f4a4ade4a7f), ULL(0x9e4495dada73da95),
    ULL(0xfaa2255858e85825), ULL(0x06cfcac9c946c9ca), ULL(0x557c8d29297b298d), ULL(0x505a220a0a1e0a22),
    ULL(0xe1504fb1b1ceb14f), ULL(0x69c91aa0a0fda01a), ULL(0x7f14da6b6bbd6bda), ULL(0x5cd9ab85859285ab),
    ULL(0x813c73bdbddabd73), ULL(0xd28f345d5de75d34), ULL(0x8090501010301050), ULL(0xf30703f4f401f403),
    ULL(0x16ddc0cbcb40cbc0), ULL(0xedd3c63e3e423ec6), ULL(0x282d1105050f0511), ULL(0x1f78e66767a967e6),
    ULL(0x739753e4e431e453), ULL(0x2502bb27276927bb), ULL(0x3273584141c34158), ULL(0x2ca79d8b8b808b9d),
    ULL(0x51f601a7a7f4a701), ULL(0xcfb2947d7d877d94), ULL(0xdc49fb9595a295fb), ULL(0x8e569fd8d875d89f),
    ULL(0x8b7030fbfb10fb30), ULL(0x23cd71eeee2fee71), ULL(0xc7bb917c7c847c91), ULL(0x1771e36666aa66e3),
    ULL(0xa67b8edddd7add8e), ULL(0xb8af4b171739174b), ULL(0x0245464747c94746), ULL(0x841adc9e9ebf9edc),
    ULL(0x1ed4c5caca43cac5), ULL(0x7558992d2d772d99), ULL(0x912e79bfbfdcbf79), ULL(0x383f1b070709071b),
    ULL(0x01ac23adadeaad23), ULL(0xeab02f5a5aee5a2f), ULL(0x6cefb583839883b5), ULL(0x85b6ff33335533ff),
    ULL(0x3f5cf26363a563f2), ULL(0x10120a020206020a), ULL(0x399338aaaae3aa38), ULL(0xafdea871719371a8),
    ULL(0x0ec6cfc8c845c8cf), ULL(0xc8d17d19192b197d), ULL(0x723b704949db4970), ULL(0x865f9ad9d976d99a),
    ULL(0xc3311df2f20bf21d), ULL(0x4ba848e3e338e348), ULL(0xe2b92a5b5bed5b2a), ULL(0x34bc928888858892),
    ULL(0xa43ec89a9ab39ac8), ULL(0x2d0bbe26266a26be), ULL(0x8dbffa32325632fa), ULL(0xe9594ab0b0cdb04a),
    ULL(0x1bf26ae9e926e96a), ULL(0x7877330f0f110f33), ULL(0xe633a6d5d562d5a6), ULL(0x74f4ba80809d80ba),
    ULL(0x99277cbebedfbe7c), ULL(0x26ebdecdcd4acdde), ULL(0xbd89e434345c34e4), ULL(0x7a32754848d84875),
    ULL(0xab5424ffff1cff24), ULL(0xf78d8f7a7a8e7a8f), ULL(0xf464ea9090ad90ea), ULL(0xc29d3e5f5fe15f3e),
    ULL(0x1d3da020206020a0), ULL(0x670fd56868b868d5), ULL(0xd0ca721a1a2e1a72), ULL(0x19b72caeaeefae2c),
    ULL(0xc97d5eb4b4c1b45e), ULL(0x9ace195454fc5419), ULL(0xec7fe59393a893e5), ULL(0x0d2faa22226622aa),
    ULL(0x0763e96464ac64e9), ULL(0xdb2a12f1f10ef112), ULL(0xbfcca273739573a2), ULL(0x90825a121236125a),
    ULL(0x3a7a5d4040c0405d), ULL(0x4048280808180828), ULL(0x5695e8c3c358c3e8), ULL(0x33df7becec29ec7b),
    ULL(0x964d90dbdb70db90), ULL(0x61c01fa1a1fea11f), ULL(0x1c91838d8d8a8d83), ULL(0xf5c8c93d3d473dc9),
    ULL(0xcc5bf19797a497f1), ULL(0x0000000000000000), ULL(0x36f9d4cfcf4ccfd4), ULL(0x456e872b2b7d2b87),
    ULL(0x97e1b376769a76b3), ULL(0x64e6b082829b82b0), ULL(0xfe28a9d6d667d6a9), ULL(0xd8c3771b1b2d1b77),
    ULL(0xc1745bb5b5c2b55b), ULL(0x11be29afafecaf29), ULL(0x771ddf6a6abe6adf), ULL(0xbaea0d5050f0500d),
    ULL(0x12574c4545cf454c), ULL(0xcb3818f3f308f318), ULL(0x9dadf030305030f0), ULL(0x2bc474efef2cef74),
    ULL(0xe5dac33f3f413fc3), ULL(0x92c71c5555ff551c), ULL(0x79db10a2a2fba210), ULL(0x03e965eaea23ea65),
    ULL(0x0f6aec6565af65ec), ULL(0xb90368babad3ba68), ULL(0x654a932f2f712f93), ULL(0x4e8ee7c0c05dc0e7),
    ULL(0xbe6081dede7fde81), ULL(0xe0fc6c1c1c241c6c), ULL(0xbb462efdfd1afd2e), ULL(0x521f644d4dd74d64),
    ULL(0xe476e09292ab92e0), ULL(0x8ffabc75759f75bc), ULL(0x30361e06060a061e), ULL(0x24ae988a8a838a98),
    ULL(0xf94b40b2b2cbb240), ULL(0x638559e6e637e659), ULL(0x707e360e0e120e36), ULL(0xf8e7631f1f211f63),
    ULL(0x3755f76262a662f7), ULL(0xee3aa3d4d461d4a3), ULL(0x298132a8a8e5a832), ULL(0xc452f49696a796f4),
    ULL(0x9b623af9f916f93a), ULL(0x66a3f6c5c552c5f6), ULL(0x3510b125256f25b1), ULL(0xf2ab205959eb5920),
    ULL(0x54d0ae84849184ae), ULL(0xb7c5a772729672a7), ULL(0xd5ecdd39394b39dd), ULL(0x5a16614c4cd44c61),
    ULL(0xca943b5e5ee25e3b), ULL(0xe79f857878887885), ULL(0xdde5d838384838d8), ULL(0x1498868c8c898c86),
    ULL(0xc617b2d1d16ed1b2), ULL(0x41e40ba5a5f2a50b), ULL(0x43a14de2e23be24d), ULL(0x2f4ef86161a361f8),
    ULL(0xf14245b3b3c8b345), ULL(0x1534a521216321a5), ULL(0x9408d69c9cb99cd6), ULL(0xf0ee661e1e221e66),
    ULL(0x2261524343c54352), ULL(0x76b1fcc7c754c7fc), ULL(0xb34f2bfcfc19fc2b), ULL(0x20241404040c0414),
    ULL(0xb2e3085151f35108), ULL(0xbc25c79999b699c7), ULL(0x4f22c46d6db76dc4), ULL(0x6865390d0d170d39),
    ULL(0x837935fafa13fa35), ULL(0xb66984dfdf7cdf84), ULL(0xd7a99b7e7e827e9b), ULL(0x3d19b424246c24b4),
    ULL(0xc5fed73b3b4d3bd7), ULL(0x319a3dababe0ab3d), ULL(0x3ef0d1cece4fced1), ULL(0x8899551111331155),
    ULL(0x0c83898f8f8c8f89), ULL(0x4a046b4e4ed24e6b), ULL(0xd16651b7b7c4b751), ULL(0x0be060ebeb20eb60),
    ULL(0xfdc1cc3c3c443ccc), ULL(0x7cfdbf81819e81bf), ULL(0xd440fe9494a194fe), ULL(0xeb1c0cf7f704f70c),
    ULL(0xa11867b9b9d6b967), ULL(0x988b5f131335135f), ULL(0x7d519c2c2c742c9c), ULL(0xd605b8d3d368d3b8),
    ULL(0x6b8c5ce7e734e75c), ULL(0x5739cb6e6eb26ecb), ULL(0x6eaaf3c4c451c4f3), ULL(0x181b0f030305030f),
    ULL(0x8adc135656fa5613), ULL(0x1a5e494444cc4449), ULL(0xdfa09e7f7f817f9e), ULL(0x218837a9a9e6a937),
    ULL(0x4d67822a2a7e2a82), ULL(0xb10a6dbbbbd0bb6d), ULL(0x4687e2c1c15ec1e2), ULL(0xa2f1025353f55302),
    ULL(0xae728bdcdc79dc8b), ULL(0x5853270b0b1d0b27), ULL(0x9c01d39d9dba9dd3), ULL(0x472bc16c6cb46cc1),
    ULL(0x95a4f531315331f5), ULL(0x87f3b974749c74b9), ULL(0xe31509f6f607f609), ULL(0x0a4c434646ca4643),
    ULL(0x09a526acace9ac26), ULL(0x3cb5978989868997), ULL(0xa0b44414143c1444), ULL(0x5bba42e1e13ee142),
    ULL(0xb0a64e16163a164e), ULL(0xcdf7d23a3a4e3ad2), ULL(0x6f06d06969bb69d0), ULL(0x48412d09091b092d),
    ULL(0xa7d7ad70709070ad), ULL(0xd96f54b6b6c7b654), ULL(0xce1eb7d0d06dd0b7), ULL(0x3bd67eeded2aed7e),
    ULL(0x2ee2dbcccc49ccdb), ULL(0x2a68574242c64257), ULL(0xb42cc29898b598c2), ULL(0x49ed0ea4a4f1a40e),
    ULL(0x5d75882828782888), ULL(0xda86315c5ce45c31), ULL(0x936b3ff8f815f83f), ULL(0x44c2a486869786a4),
};

static const uint64_t C4[256] = {
    ULL(0x78c0d87818182818), ULL(0xaf0526af23236523), ULL(0xf97eb8f9c6c657c6), ULL(0x6f13fb6fe8e825e8),
    ULL(0xa14ccba187879487), ULL(0x62a91162b8b8d5b8), ULL(0x0508090501010301), ULL(0x6e420d6e4f4fd14f),
    ULL(0xeead9bee36365a36), ULL(0x0459ff04a6a6f7a6), ULL(0xbdde0cbdd2d26bd2), ULL(0x06fb0e06f5f502f5),
    ULL(0x80ef968079798b79), ULL(0xce5f30ce6f6fb16f), ULL(0xeffc6def9191ae91), ULL(0x07aaf8075252f652),
    ULL(0xfd2747fd6060a060), ULL(0x76893576bcbcd9bc), ULL(0xcdac37cd9b9bb09b), ULL(0x8c048a8c8e8e8f8e),
    ULL(0x1571d215a3a3f8a3), ULL(0x3c606c3c0c0c140c), ULL(0x8aff848a7b7b8d7b), ULL(0xe1b580e135355f35),
    ULL(0x69e8f5691d1d271d), ULL(0x4753b347e0e03de0), ULL(0xacf621acd7d764d7), ULL(0xed5e9cedc2c25bc2),
    ULL(0x966d43962e2e722e), ULL(0x7a62297a4b4bdd4b), ULL(0x21a35d21fefe1ffe), ULL(0x1682d5165757f957),
    ULL(0x41a8bd4115153f15), ULL(0xb69fe8b677779977), ULL(0xeba592eb37375937), ULL(0x567b9e56e5e532e5),
    ULL(0xd98c13d99f9fbc9f), ULL(0x17d32317f0f00df0), ULL(0x7f6a207f4a4ade4a), ULL(0x959e4495dada73da),
    ULL(0x25faa2255858e858), ULL(0xca06cfcac9c946c9), ULL(0x8d557c8d29297b29), ULL(0x22505a220a0a1e0a),
    ULL(0x4fe1504fb1b1ceb1), ULL(0x1a69c91aa0a0fda0), ULL(0xda7f14da6b6bbd6b), ULL(0xab5cd9ab85859285),
    ULL(0x73813c73bdbddabd), ULL(0x34d28f345d5de75d), ULL(0x5080905010103010), ULL(0x03f30703f4f401f4),
    ULL(0xc016ddc0cbcb40cb), ULL(0xc6edd3c63e3e423e), ULL(0x11282d1105050f05), ULL(0xe61f78e66767a967),
    ULL(0x53739753e4e431e4), ULL(0xbb2502bb27276927), ULL(0x583273584141c341), ULL(0x9d2ca79d8b8b808b),
    ULL(0x0151f601a7a7f4a7), ULL(0x94cfb2947d7d877d), ULL(0xfbdc49fb9595a295), ULL(0x9f8e569fd8d875d8),
    ULL(0x308b7030fbfb10fb), ULL(0x7123cd71eeee2fee), ULL(0x91c7bb917c7c847c), ULL(0xe31771e36666aa66),
    ULL(0x8ea67b8edddd7add), ULL(0x4bb8af4b17173917), ULL(0x460245464747c947), ULL(0xdc841adc9e9ebf9e),
    ULL(0xc51ed4c5caca43ca), ULL(0x997558992d2d772d), ULL(0x79912e79bfbfdcbf), ULL(0x1b383f1b07070907),
    ULL(0x2301ac23adadeaad), ULL(0x2feab02f5a5aee5a), ULL(0xb56cefb583839883), ULL(0xff85b6ff33335533),
    ULL(0xf23f5cf26363a563), ULL(0x0a10120a02020602), ULL(0x38399338aaaae3aa), ULL(0xa8afdea871719371),
    ULL(0xcf0ec6cfc8c845c8), ULL(0x7dc8d17d19192b19), ULL(0x70723b704949db49), ULL(0x9a865f9ad9d976d9),
    ULL(0x1dc3311df2f20bf2), ULL(0x484ba848e3e338e3), ULL(0x2ae2b92a5b5bed5b), ULL(0x9234bc9288888588),
    ULL(0xc8a43ec89a9ab39a), ULL(0xbe2d0bbe26266a26), ULL(0xfa8dbffa32325632), ULL(0x4ae9594ab0b0cdb0),
    ULL(0x6a1bf26ae9e926e9), ULL(0x337877330f0f110f), ULL(0xa6e633a6d5d562d5), ULL(0xba74f4ba80809d80),
    ULL(0x7c99277cbebedfbe), ULL(0xde26ebdecdcd4acd), ULL(0xe4bd89e434345c34), ULL(0x757a32754848d848),
    ULL(0x24ab5424ffff1cff), ULL(0x8ff78d8f7a7a8e7a), ULL(0xeaf464ea9090ad90), ULL(0x3ec29d3e5f5fe15f),
    ULL(0xa01d3da020206020), ULL(0xd5670fd56868b868), ULL(0x72d0ca721a1a2e1a), ULL(0x2c19b72caeaeefae),
    ULL(0x5ec97d5eb4b4c1b4), ULL(0x199ace195454fc54), ULL(0xe5ec7fe59393a893), ULL(0xaa0d2faa22226622),
    ULL(0xe90763e96464ac64), ULL(0x12db2a12f1f10ef1), ULL(0xa2bfcca273739573), ULL(0x5a90825a12123612),
    ULL(0x5d3a7a5d4040c040), ULL(0x2840482808081808), ULL(0xe85695e8c3c358c3), ULL(0x7b33df7becec29ec),
    ULL(0x90964d90dbdb70db), ULL(0x1f61c01fa1a1fea1), ULL(0x831c91838d8d8a8d), ULL(0xc9f5c8c93d3d473d),
    ULL(0xf1cc5bf19797a497), ULL(0x0000000000000000), ULL(0xd436f9d4cfcf4ccf), ULL(0x87456e872b2b7d2b),
    ULL(0xb397e1b376769a76), ULL(0xb064e6b082829b82), ULL(0xa9fe28a9d6d667d6), ULL(0x77d8c3771b1b2d1b),
    ULL(0x5bc1745bb5b5c2b5), ULL(0x2911be29afafecaf), ULL(0xdf771ddf6a6abe6a), ULL(0x0dbaea0d5050f050),
    ULL(0x4c12574c4545cf45), ULL(0x18cb3818f3f308f3), ULL(0xf09dadf030305030), ULL(0x742bc474efef2cef),
    ULL(0xc3e5dac33f3f413f), ULL(0x1c92c71c5555ff55), ULL(0x1079db10a2a2fba2), ULL(0x6503e965eaea23ea),
    ULL(0xec0f6aec6565af65), ULL(0x68b90368babad3ba), ULL(0x93654a932f2f712f), ULL(0xe74e8ee7c0c05dc0),
    ULL(0x81be6081dede7fde), ULL(0x6ce0fc6c1c1c241c), ULL(0x2ebb462efdfd1afd), ULL(0x64521f644d4dd74d),
    ULL(0xe0e476e09292ab92), ULL(0xbc8ffabc75759f75), ULL(0x1e30361e06060a06), ULL(0x9824ae988a8a838a),
    ULL(0x40f94b40b2b2cbb2), ULL(0x59638559e6e637e6), ULL(0x36707e360e0e120e), ULL(0x63f8e7631f1f211f),
    ULL(0xf73755f76262a662), ULL(0xa3ee3aa3d4d461d4), ULL(0x32298132a8a8e5a8), ULL(0xf4c452f49696a796),
    ULL(0x3a9b623af9f916f9), ULL(0xf666a3f6c5c552c5), ULL(0xb13510b125256f25), ULL(0x20f2ab205959eb59),
    ULL(0xae54d0ae84849184), ULL(0xa7b7c5a772729672), ULL(0xddd5ecdd39394b39), ULL(0x615a16614c4cd44c),
    ULL(0x3bca943b5e5ee25e), ULL(0x85e79f8578788878), ULL(0xd8dde5d838384838), ULL(0x861498868c8c898c),
    ULL(0xb2c617b2d1d16ed1), ULL(0x0b41e40ba5a5f2a5), ULL(0x4d43a14de2e23be2), ULL(0xf82f4ef86161a361),
    ULL(0x45f14245b3b3c8b3), ULL(0xa51534a521216321), ULL(0xd69408d69c9cb99c), ULL(0x66f0ee661e1e221e),
    ULL(0x522261524343c543), ULL(0xfc76b1fcc7c754c7), ULL(0x2bb34f2bfcfc19fc), ULL(0x1420241404040c04),
    ULL(0x08b2e3085151f351), ULL(0xc7bc25c79999b699), ULL(0xc44f22c46d6db76d), ULL(0x396865390d0d170d),
    ULL(0x35837935fafa13fa), ULL(0x84b66984dfdf7cdf), ULL(0x9bd7a99b7e7e827e), ULL(0xb43d19b424246c24),
    ULL(0xd7c5fed73b3b4d3b), ULL(0x3d319a3dababe0ab), ULL(0xd13ef0d1cece4fce), ULL(0x5588995511113311),
    ULL(0x890c83898f8f8c8f), ULL(0x6b4a046b4e4ed24e), ULL(0x51d16651b7b7c4b7), ULL(0x600be060ebeb20eb),
    ULL(0xccfdc1cc3c3c443c), ULL(0xbf7cfdbf81819e81), ULL(0xfed440fe9494a194), ULL(0x0ceb1c0cf7f704f7),
    ULL(0x67a11867b9b9d6b9), ULL(0x5f988b5f13133513), ULL(0x9c7d519c2c2c742c), ULL(0xb8d605b8d3d368d3),
    ULL(0x5c6b8c5ce7e734e7), ULL(0xcb5739cb6e6eb26e), ULL(0xf36eaaf3c4c451c4), ULL(0x0f181b0f03030503),
    ULL(0x138adc135656fa56), ULL(0x491a5e494444cc44), ULL(0x9edfa09e7f7f817f), ULL(0x37218837a9a9e6a9),
    ULL(0x824d67822a2a7e2a), ULL(0x6db10a6dbbbbd0bb), ULL(0xe24687e2c1c15ec1), ULL(0x02a2f1025353f553),
    ULL(0x8bae728bdcdc79dc), ULL(0x275853270b0b1d0b), ULL(0xd39c01d39d9dba9d), ULL(0xc1472bc16c6cb46c),
    ULL(0xf595a4f531315331), ULL(0xb987f3b974749c74), ULL(0x09e31509f6f607f6), ULL(0x430a4c434646ca46),
    ULL(0x2609a526acace9ac), ULL(0x973cb59789898689), ULL(0x44a0b44414143c14), ULL(0x425bba42e1e13ee1),
    ULL(0x4eb0a64e16163a16), ULL(0xd2cdf7d23a3a4e3a), ULL(0xd06f06d06969bb69), ULL(0x2d48412d09091b09),
    ULL(0xada7d7ad70709070), ULL(0x54d96f54b6b6c7b6), ULL(0xb7ce1eb7d0d06dd0), ULL(0x7e3bd67eeded2aed),
    ULL(0xdb2ee2dbcccc49cc), ULL(0x572a68574242c642), ULL(0xc2b42cc29898b598), ULL(0x0e49ed0ea4a4f1a4),
    ULL(0x885d758828287828), ULL(0x31da86315c5ce45c), ULL(0x3f936b3ff8f815f8), ULL(0xa444c2a486869786),
};

static const uint64_t C5[256] = {
    ULL(0x1878c0d878181828), ULL(0x23af0526af232365), ULL(0xc6f97eb8f9c6c657), ULL(0xe86f13fb6fe8e825),
    ULL(0x87a14ccba1878794), ULL(0xb862a91162b8b8d5), ULL(0x0105080905010103), ULL(0x4f6e420d6e4f4fd1),
    ULL(0x36eead9bee36365a), ULL(0xa60459ff04a6a6f7), ULL(0xd2bdde0cbdd2d26b), ULL(0xf506fb0e06f5f502),
    ULL(0x7980ef968079798b), ULL(0x6fce5f30ce6f6fb1), ULL(0x91effc6def9191ae), ULL(0x5207aaf8075252f6),
    ULL(0x60fd2747fd6060a0), ULL(0xbc76893576bcbcd9), ULL(0x9bcdac37cd9b9bb0), ULL(0x8e8c048a8c8e8e8f),
    ULL(0xa31571d215a3a3f8), ULL(0x0c3c606c3c0c0c14), ULL(0x7b8aff848a7b7b8d), ULL(0x35e1b580e135355f),
    ULL(0x1d69e8f5691d1d27), ULL(0xe04753b347e0e03d), ULL(0xd7acf621acd7d764), ULL(0xc2ed5e9cedc2c25b),
    ULL(0x2e966d43962e2e72), ULL(0x4b7a62297a4b4bdd), ULL(0xfe21a35d21fefe1f), ULL(0x571682d5165757f9),
    ULL(0x1541a8bd4115153f), ULL(0x77b69fe8b6777799), ULL(0x37eba592eb373759), ULL(0xe5567b9e56e5e532),
    ULL(0x9fd98c13d99f9fbc), ULL(0xf017d32317f0f00d), ULL(0x4a7f6a207f4a4ade), ULL(0xda959e4495dada73),
    ULL(0x5825faa2255858e8), ULL(0xc9ca06cfcac9c946), ULL(0x298d557c8d29297b), ULL(0x0a22505a220a0a1e),
    ULL(0xb14fe1504fb1b1ce), ULL(0xa01a69c91aa0a0fd), ULL(0x6bda7f14da6b6bbd), ULL(0x85ab5cd9ab858592),
    ULL(0xbd73813c73bdbdda), ULL(0x5d34d28f345d5de7), ULL(0x1050809050101030), ULL(0xf403f30703f4f401),
    ULL(0xcbc016ddc0cbcb40), ULL(0x3ec6edd3c63e3e42), ULL(0x0511282d1105050f), ULL(0x67e61f78e66767a9),
    ULL(0xe453739753e4e431), ULL(0x27bb2502bb272769), ULL(0x41583273584141c3), ULL(0x8b9d2ca79d8b8b80),
    ULL(0xa70151f601a7a7f4), ULL(0x7d94cfb2947d7d87), ULL(0x95fbdc49fb9595a2), ULL(0xd89f8e569fd8d875),
    ULL(0xfb308b7030fbfb10), ULL(0xee7123cd71eeee2f), ULL(0x7c91c7bb917c7c84), ULL(0x66e31771e36666aa),
    ULL(0xdd8ea67b8edddd7a), ULL(0x174bb8af4b171739), ULL(0x47460245464747c9), ULL(0x9edc841adc9e9ebf),
    ULL(0xcac51ed4c5caca43), ULL(0x2d997558992d2d77), ULL(0xbf79912e79bfbfdc), ULL(0x071b383f1b070709),
    ULL(0xad2301ac23adadea), ULL(0x5a2feab02f5a5aee), ULL(0x83b56cefb5838398), ULL(0x33ff85b6ff333355),
    ULL(0x63f23f5cf26363a5), ULL(0x020a10120a020206), ULL(0xaa38399338aaaae3), ULL(0x71a8afdea8717193),
    ULL(0xc8cf0ec6cfc8c845), ULL(0x197dc8d17d19192b), ULL(0x4970723b704949db), ULL(0xd99a865f9ad9d976),
    ULL(0xf21dc3311df2f20b), ULL(0xe3484ba848e3e338), ULL(0x5b2ae2b92a5b5bed), ULL(0x889234bc92888885),
    ULL(0x9ac8a43ec89a9ab3), ULL(0x26be2d0bbe26266a), ULL(0x32fa8dbffa323256), ULL(0xb04ae9594ab0b0cd),
    ULL(0xe96a1bf26ae9e926), ULL(0x0f337877330f0f11), ULL(0xd5a6e633a6d5d562), ULL(0x80ba74f4ba80809d),
    ULL(0xbe7c99277cbebedf), ULL(0xcdde26ebdecdcd4a), ULL(0x34e4bd89e434345c), ULL(0x48757a32754848d8),
    ULL(0xff24ab5424ffff1c), ULL(0x7a8ff78d8f7a7a8e), ULL(0x90eaf464ea9090ad), ULL(0x5f3ec29d3e5f5fe1),
    ULL(0x20a01d3da0202060), ULL(0x68d5670fd56868b8), ULL(0x1a72d0ca721a1a2e), ULL(0xae2c19b72caeaeef),
    ULL(0xb45ec97d5eb4b4c1), ULL(0x54199ace195454fc), ULL(0x93e5ec7fe59393a8), ULL(0x22aa0d2faa222266),
    ULL(0x64e90763e96464ac), ULL(0xf112db2a12f1f10e), ULL(0x73a2bfcca2737395), ULL(0x125a90825a121236),
    ULL(0x405d3a7a5d4040c0), ULL(0x0828404828080818), ULL(0xc3e85695e8c3c358), ULL(0xec7b33df7becec29),
    ULL(0xdb90964d90dbdb70), ULL(0xa11f61c01fa1a1fe), ULL(0x8d831c91838d8d8a), ULL(0x3dc9f5c8c93d3d47),
    ULL(0x97f1cc5bf19797a4), ULL(0x0000000000000000), ULL(0xcfd436f9d4cfcf4c), ULL(0x2b87456e872b2b7d),
    ULL(0x76b397e1b376769a), ULL(0x82b064e6b082829b), ULL(0xd6a9fe28a9d6d667), ULL(0x1b77d8c3771b1b2d),
    ULL(0xb55bc1745bb5b5c2), ULL(0xaf2911be29afafec), ULL(0x6adf771ddf6a6abe), ULL(0x500dbaea0d5050f0),
    ULL(0x454c12574c4545cf), ULL(0xf318cb3818f3f308), ULL(0x30f09dadf0303050), ULL(0xef742bc474efef2c),
    ULL(0x3fc3e5dac33f3f41), ULL(0x551c92c71c5555ff), ULL(0xa21079db10a2a2fb), ULL(0xea6503e965eaea23),
    ULL(0x65ec0f6aec6565af), ULL(0xba68b90368babad3), ULL(0x2f93654a932f2f71), ULL(0xc0e74e8ee7c0c05d),
    ULL(0xde81be6081dede7f), ULL(0x1c6ce0fc6c1c1c24), ULL(0xfd2ebb462efdfd1a), ULL(0x4d64521f644d4dd7),
    ULL(0x92e0e476e09292ab), ULL(0x75bc8ffabc75759f), ULL(0x061e30361e06060a), ULL(0x8a9824ae988a8a83),
    ULL(0xb240f94b40b2b2cb), ULL(0xe659638559e6e637), ULL(0x0e36707e360e0e12), ULL(0x1f63f8e7631f1f21),
    ULL(0x62f73755f76262a6), ULL(0xd4a3ee3aa3d4d461), ULL(0xa832298132a8a8e5), ULL(0x96f4c452f49696a7),
    ULL(0xf93a9b623af9f916), ULL(0xc5f666a3f6c5c552), ULL(0x25b13510b125256f), ULL(0x5920f2ab205959eb),
    ULL(0x84ae54d0ae848491), ULL(0x72a7b7c5a7727296), ULL(0x39ddd5ecdd39394b), ULL(0x4c615a16614c4cd4),
    ULL(0x5e3bca943b5e5ee2), ULL(0x7885e79f85787888), ULL(0x38d8dde5d8383848), ULL(0x8c861498868c8c89),
    ULL(0xd1b2c617b2d1d16e), ULL(0xa50b41e40ba5a5f2), ULL(0xe24d43a14de2e23b), ULL(0x61f82f4ef86161a3),
    ULL(0xb345f14245b3b3c8), ULL(0x21a51534a5212163), ULL(0x9cd69408d69c9cb9), ULL(0x1e66f0ee661e1e22),
    ULL(0x43522261524343c5), ULL(0xc7fc76b1fcc7c754), ULL(0xfc2bb34f2bfcfc19), ULL(0x041420241404040c),
    ULL(0x5108b2e3085151f3), ULL(0x99c7bc25c79999b6), ULL(0x6dc44f22c46d6db7), ULL(0x0d396865390d0d17),
    ULL(0xfa35837935fafa13), ULL(0xdf84b66984dfdf7c), ULL(0x7e9bd7a99b7e7e82), ULL(0x24b43d19b424246c),
    ULL(0x3bd7c5fed73b3b4d), ULL(0xab3d319a3dababe0), ULL(0xced13ef0d1cece4f), ULL(0x1155889955111133),
    ULL(0x8f890c83898f8f8c), ULL(0x4e6b4a046b4e4ed2), ULL(0xb751d16651b7b7c4), ULL(0xeb600be060ebeb20),
    ULL(0x3cccfdc1cc3c3c44), ULL(0x81bf7cfdbf81819e), ULL(0x94fed440fe9494a1), ULL(0xf70ceb1c0cf7f704),
    ULL(0xb967a11867b9b9d6), ULL(0x135f988b5f131335), ULL(0x2c9c7d519c2c2c74), ULL(0xd3b8d605b8d3d368),
    ULL(0xe75c6b8c5ce7e734), ULL(0x6ecb5739cb6e6eb2), ULL(0xc4f36eaaf3c4c451), ULL(0x030f181b0f030305),
    ULL(0x56138adc135656fa), ULL(0x44491a5e494444cc), ULL(0x7f9edfa09e7f7f81), ULL(0xa937218837a9a9e6),
    ULL(0x2a824d67822a2a7e), ULL(0xbb6db10a6dbbbbd0), ULL(0xc1e24687e2c1c15e), ULL(0x5302a2f1025353f5),
    ULL(0xdc8bae728bdcdc79), ULL(0x0b275853270b0b1d), ULL(0x9dd39c01d39d9dba), ULL(0x6cc1472bc16c6cb4),
    ULL(0x31f595a4f5313153), ULL(0x74b987f3b974749c), ULL(0xf609e31509f6f607), ULL(0x46430a4c434646ca),
    ULL(0xac2609a526acace9), ULL(0x89973cb597898986), ULL(0x1444a0b44414143c), ULL(0xe1425bba42e1e13e),
    ULL(0x164eb0a64e16163a), ULL(0x3ad2cdf7d23a3a4e), ULL(0x69d06f06d06969bb), ULL(0x092d48412d09091b),
    ULL(0x70ada7d7ad707090), ULL(0xb654d96f54b6b6c7), ULL(0xd0b7ce1eb7d0d06d), ULL(0xed7e3bd67eeded2a),
    ULL(0xccdb2ee2dbcccc49), ULL(0x42572a68574242c6), ULL(0x98c2b42cc29898b5), ULL(0xa40e49ed0ea4a4f1),
    ULL(0x28885d7588282878), ULL(0x5c31da86315c5ce4), ULL(0xf83f936b3ff8f815), ULL(0x86a444c2a4868697),
};

static const uint64_t C6[256] = {
    ULL(0x281878c0d8781818), ULL(0x6523af0526af2323), ULL(0x57c6f97eb8f9c6c6), ULL(0x25e86f13fb6fe8e8),
    ULL(0x9487a14ccba18787), ULL(0xd5b862a91162b8b8), ULL(0x0301050809050101), ULL(0xd14f6e420d6e4f4f),
    ULL(0x5a36eead9bee3636), ULL(0xf7a60459ff04a6a6), ULL(0x6bd2bdde0cbdd2d2), ULL(0x02f506fb0e06f5f5),
    ULL(0x8b7980ef96807979), ULL(0xb16fce5f30ce6f6f), ULL(0xae91effc6def9191), ULL(0xf65207aaf8075252),
    ULL(0xa060fd2747fd6060), ULL(0xd9bc76893576bcbc), ULL(0xb09bcdac37cd9b9b), ULL(0x8f8e8c048a8c8e8e),
    ULL(0xf8a31571d215a3a3), ULL(0x140c3c606c3c0c0c), ULL(0x8d7b8aff848a7b7b), ULL(0x5f35e1b580e13535),
    ULL(0x271d69e8f5691d1d), ULL(0x3de04753b347e0e0), ULL(0x64d7acf621acd7d7), ULL(0x5bc2ed5e9cedc2c2),
    ULL(0x722e966d43962e2e), ULL(0xdd4b7a62297a4b4b), ULL(0x1ffe21a35d21fefe), ULL(0xf9571682d5165757),
    ULL(0x3f1541a8bd411515), ULL(0x9977b69fe8b67777), ULL(0x5937eba592eb3737), ULL(0x32e5567b9e56e5e5),
    ULL(0xbc9fd98c13d99f9f), ULL(0x0df017d32317f0f0), ULL(0xde4a7f6a207f4a4a), ULL(0x73da959e4495dada),
    ULL(0xe85825faa2255858), ULL(0x46c9ca06cfcac9c9), ULL(0x7b298d557c8d2929), ULL(0x1e0a22505a220a0a),
    ULL(0xceb14fe1504fb1b1), ULL(0xfda01a69c91aa0a0), ULL(0xbd6bda7f14da6b6b), ULL(0x9285ab5cd9ab8585),
    ULL(0xdabd73813c73bdbd), ULL(0xe75d34d28f345d5d), ULL(0x3010508090501010), ULL(0x01f403f30703f4f4),
    ULL(0x40cbc016ddc0cbcb), ULL(0x423ec6edd3c63e3e), ULL(0x0f0511282d110505), ULL(0xa967e61f78e66767),
    ULL(0x31e453739753e4e4), ULL(0x6927bb2502bb2727), ULL(0xc341583273584141), ULL(0x808b9d2ca79d8b8b),
    ULL(0xf4a70151f601a7a7), ULL(0x877d94cfb2947d7d), ULL(0xa295fbdc49fb9595), ULL(0x75d89f8e569fd8d8),
    ULL(0x10fb308b7030fbfb), ULL(0x2fee7123cd71eeee), ULL(0x847c91c7bb917c7c), ULL(0xaa66e31771e36666),
    ULL(0x7add8ea67b8edddd), ULL(0x39174bb8af4b1717), ULL(0xc947460245464747), ULL(0xbf9edc841adc9e9e),
    ULL(0x43cac51ed4c5caca), ULL(0x772d997558992d2d), ULL(0xdcbf79912e79bfbf), ULL(0x09071b383f1b0707),
    ULL(0xeaad2301ac23adad), ULL(0xee5a2feab02f5a5a), ULL(0x9883b56cefb58383), ULL(0x5533ff85b6ff3333),
    ULL(0xa563f23f5cf26363), ULL(0x06020a10120a0202), ULL(0xe3aa38399338aaaa), ULL(0x9371a8afdea87171),
    ULL(0x45c8cf0ec6cfc8c8), ULL(0x2b197dc8d17d1919), ULL(0xdb4970723b704949), ULL(0x76d99a865f9ad9d9),
    ULL(0x0bf21dc3311df2f2), ULL(0x38e3484ba848e3e3), ULL(0xed5b2ae2b92a5b5b), ULL(0x85889234bc928888),
    ULL(0xb39ac8a43ec89a9a), ULL(0x6a26be2d0bbe2626), ULL(0x5632fa8dbffa3232), ULL(0xcdb04ae9594ab0b0),
    ULL(0x26e96a1bf26ae9e9), ULL(0x110f337877330f0f), ULL(0x62d5a6e633a6d5d5), ULL(0x9d80ba74f4ba8080),
    ULL(0xdfbe7c99277cbebe), ULL(0x4acdde26ebdecdcd), ULL(0x5c34e4bd89e43434), ULL(0xd848757a32754848),
    ULL(0x1cff24ab5424ffff), ULL(0x8e7a8ff78d8f7a7a), ULL(0xad90eaf464ea9090), ULL(0xe15f3ec29d3e5f5f),
    ULL(0x6020a01d3da02020), ULL(0xb868d5670fd56868), ULL(0x2e1a72d0ca721a1a), ULL(0xefae2c19b72caeae),
    ULL(0xc1b45ec97d5eb4b4), ULL(0xfc54199ace195454), ULL(0xa893e5ec7fe59393), ULL(0x6622aa0d2faa2222),
    ULL(0xac64e90763e96464), ULL(0x0ef112db2a12f1f1), ULL(0x9573a2bfcca27373), ULL(0x36125a90825a1212),
    ULL(0xc0405d3a7a5d4040), ULL(0x1808284048280808), ULL(0x58c3e85695e8c3c3), ULL(0x29ec7b33df7becec),
    ULL(0x70db90964d90dbdb), ULL(0xfea11f61c01fa1a1), ULL(0x8a8d831c91838d8d), ULL(0x473dc9f5c8c93d3d),
    ULL(0xa497f1cc5bf19797), ULL(0x0000000000000000), ULL(0x4ccfd436f9d4cfcf), ULL(0x7d2b87456e872b2b),
    ULL(0x9a76b397e1b37676), ULL(0x9b82b064e6b08282), ULL(0x67d6a9fe28a9d6d6), ULL(0x2d1b77d8c3771b1b),
    ULL(0xc2b55bc1745bb5b5), ULL(0xecaf2911be29afaf), ULL(0xbe6adf771ddf6a6a), ULL(0xf0500dbaea0d5050),
    ULL(0xcf454c12574c4545), ULL(0x08f318cb3818f3f3), ULL(0x5030f09dadf03030), ULL(0x2cef742bc474efef),
    ULL(0x413fc3e5dac33f3f), ULL(0xff551c92c71c5555), ULL(0xfba21079db10a2a2), ULL(0x23ea6503e965eaea),
    ULL(0xaf65ec0f6aec6565), ULL(0xd3ba68b90368baba), ULL(0x712f93654a932f2f), ULL(0x5dc0e74e8ee7c0c0),
    ULL(0x7fde81be6081dede), ULL(0x241c6ce0fc6c1c1c), ULL(0x1afd2ebb462efdfd), ULL(0xd74d64521f644d4d),
    ULL(0xab92e0e476e09292), ULL(0x9f75bc8ffabc7575), ULL(0x0a061e30361e0606), ULL(0x838a9824ae988a8a),
    ULL(0xcbb240f94b40b2b2), ULL(0x37e659638559e6e6), ULL(0x120e36707e360e0e), ULL(0x211f63f8e7631f1f),
    ULL(0xa662f73755f76262), ULL(0x61d4a3ee3aa3d4d4), ULL(0xe5a832298132a8a8), ULL(0xa796f4c452f49696),
    ULL(0x16f93a9b623af9f9), ULL(0x52c5f666a3f6c5c5), ULL(0x6f25b13510b12525), ULL(0xeb5920f2ab205959),
    ULL(0x9184ae54d0ae8484), ULL(0x9672a7b7c5a77272), ULL(0x4b39ddd5ecdd3939), ULL(0xd44c615a16614c4c),
    ULL(0xe25e3bca943b5e5e), ULL(0x887885e79f857878), ULL(0x4838d8dde5d83838), ULL(0x898c861498868c8c),
    ULL(0x6ed1b2c617b2d1d1), ULL(0xf2a50b41e40ba5a5), ULL(0x3be24d43a14de2e2), ULL(0xa361f82f4ef86161),
    ULL(0xc8b345f14245b3b3), ULL(0x6321a51534a52121), ULL(0xb99cd69408d69c9c), ULL(0x221e66f0ee661e1e),
    ULL(0xc543522261524343), ULL(0x54c7fc76b1fcc7c7), ULL(0x19fc2bb34f2bfcfc), ULL(0x0c04142024140404),
    ULL(0xf35108b2e3085151), ULL(0xb699c7bc25c79999), ULL(0xb76dc44f22c46d6d), ULL(0x170d396865390d0d),
    ULL(0x13fa35837935fafa), ULL(0x7cdf84b66984dfdf), ULL(0x827e9bd7a99b7e7e), ULL(0x6c24b43d19b42424),
    ULL(0x4d3bd7c5fed73b3b), ULL(0xe0ab3d319a3dabab), ULL(0x4fced13ef0d1cece), ULL(0x3311558899551111),
    ULL(0x8c8f890c83898f8f), ULL(0xd24e6b4a046b4e4e), ULL(0xc4b751d16651b7b7), ULL(0x20eb600be060ebeb),
    ULL(0x443cccfdc1cc3c3c), ULL(0x9e81bf7cfdbf8181), ULL(0xa194fed440fe9494), ULL(0x04f70ceb1c0cf7f7),
    ULL(0xd6b967a11867b9b9), ULL(0x35135f988b5f1313), ULL(0x742c9c7d519c2c2c), ULL(0x68d3b8d605b8d3d3),
    ULL(0x34e75c6b8c5ce7e7), ULL(0xb26ecb5739cb6e6e), ULL(0x51c4f36eaaf3c4c4), ULL(0x05030f181b0f0303),
    ULL(0xfa56138adc135656), ULL(0xcc44491a5e494444), ULL(0x817f9edfa09e7f7f), ULL(0xe6a937218837a9a9),
    ULL(0x7e2a824d67822a2a), ULL(0xd0bb6db10a6dbbbb), ULL(0x5ec1e24687e2c1c1), ULL(0xf55302a2f1025353),
    ULL(0x79dc8bae728bdcdc), ULL(0x1d0b275853270b0b), ULL(0xba9dd39c01d39d9d), ULL(0xb46cc1472bc16c6c),
    ULL(0x5331f595a4f53131), ULL(0x9c74b987f3b97474), ULL(0x07f609e31509f6f6), ULL(0xca46430a4c434646),
    ULL(0xe9ac2609a526acac), ULL(0x8689973cb5978989), ULL(0x3c1444a0b4441414), ULL(0x3ee1425bba42e1e1),
    ULL(0x3a164eb0a64e1616), ULL(0x4e3ad2cdf7d23a3a), ULL(0xbb69d06f06d06969), ULL(0x1b092d48412d0909),
    ULL(0x9070ada7d7ad7070), ULL(0xc7b654d96f54b6b6), ULL(0x6dd0b7ce1eb7d0d0), ULL(0x2aed7e3bd67eeded),
    ULL(0x49ccdb2ee2dbcccc), ULL(0xc642572a68574242), ULL(0xb598c2b42cc29898), ULL(0xf1a40e49ed0ea4a4),
    ULL(0x7828885d75882828), ULL(0xe45c31da86315c5c), ULL(0x15f83f936b3ff8f8), ULL(0x9786a444c2a48686),
};

static const uint64_t C7[256] = {
    ULL(0x18281878c0d87818), ULL(0x236523af0526af23), ULL(0xc657c6f97eb8f9c6), ULL(0xe825e86f13fb6fe8),
    ULL(0x879487a14ccba187), ULL(0xb8d5b862a91162b8), ULL(0x0103010508090501), ULL(0x4fd14f6e420d6e4f),
    ULL(0x365a36eead9bee36), ULL(0xa6f7a60459ff04a6), ULL(0xd26bd2bdde0cbdd2), ULL(0xf502f506fb0e06f5),
    ULL(0x798b7980ef968079), ULL(0x6fb16fce5f30ce6f), ULL(0x91ae91effc6def91), ULL(0x52f65207aaf80752),
    ULL(0x60a060fd2747fd60), ULL(0xbcd9bc76893576bc), ULL(0x9bb09bcdac37cd9b), ULL(0x8e8f8e8c048a8c8e),
    ULL(0xa3f8a31571d215a3), ULL(0x0c140c3c606c3c0c), ULL(0x7b8d7b8aff848a7b), ULL(0x355f35e1b580e135),
    ULL(0x1d271d69e8f5691d), ULL(0xe03de04753b347e0), ULL(0xd764d7acf621acd7), ULL(0xc25bc2ed5e9cedc2),
    ULL(0x2e722e966d43962e), ULL(0x4bdd4b7a62297a4b), ULL(0xfe1ffe21a35d21fe), ULL(0x57f9571682d51657),
    ULL(0x153f1541a8bd4115), ULL(0x779977b69fe8b677), ULL(0x375937eba592eb37), ULL(0xe532e5567b9e56e5),
    ULL(0x9fbc9fd98c13d99f), ULL(0xf00df017d32317f0), ULL(0x4ade4a7f6a207f4a), ULL(0xda73da959e4495da),
    ULL(0x58e85825faa22558), ULL(0xc946c9ca06cfcac9), ULL(0x297b298d557c8d29), ULL(0x0a1e0a22505a220a),
    ULL(0xb1ceb14fe1504fb1), ULL(0xa0fda01a69c91aa0), ULL(0x6bbd6bda7f14da6b), ULL(0x859285ab5cd9ab85),
    ULL(0xbddabd73813c73bd), ULL(0x5de75d34d28f345d), ULL(0x1030105080905010), ULL(0xf401f403f30703f4),
    ULL(0xcb40cbc016ddc0cb), ULL(0x3e423ec6edd3c63e), ULL(0x050f0511282d1105), ULL(0x67a967e61f78e667),
    ULL(0xe431e453739753e4), ULL(0x276927bb2502bb27), ULL(0x41c3415832735841), ULL(0x8b808b9d2ca79d8b),
    ULL(0xa7f4a70151f601a7), ULL(0x7d877d94cfb2947d), ULL(0x95a295fbdc49fb95), ULL(0xd875d89f8e569fd8),
    ULL(0xfb10fb308b7030fb), ULL(0xee2fee7123cd71ee), ULL(0x7c847c91c7bb917c), ULL(0x66aa66e31771e366),
    ULL(0xdd7add8ea67b8edd), ULL(0x1739174bb8af4b17), ULL(0x47c9474602454647), ULL(0x9ebf9edc841adc9e),
    ULL(0xca43cac51ed4c5ca), ULL(0x2d772d997558992d), ULL(0xbfdcbf79912e79bf), ULL(0x0709071b383f1b07),
    ULL(0xadeaad2301ac23ad), ULL(0x5aee5a2feab02f5a), ULL(0x839883b56cefb583), ULL(0x335533ff85b6ff33),
    ULL(0x63a563f23f5cf263), ULL(0x0206020a10120a02), ULL(0xaae3aa38399338aa), ULL(0x719371a8afdea871),
    ULL(0xc845c8cf0ec6cfc8), ULL(0x192b197dc8d17d19), ULL(0x49db4970723b7049), ULL(0xd976d99a865f9ad9),
    ULL(0xf20bf21dc3311df2), ULL(0xe338e3484ba848e3), ULL(0x5bed5b2ae2b92a5b), ULL(0x8885889234bc9288),
    ULL(0x9ab39ac8a43ec89a), ULL(0x266a26be2d0bbe26), ULL(0x325632fa8dbffa32), ULL(0xb0cdb04ae9594ab0),
    ULL(0xe926e96a1bf26ae9), ULL(0x0f110f337877330f), ULL(0xd562d5a6e633a6d5), ULL(0x809d80ba74f4ba80),
    ULL(0xbedfbe7c99277cbe), ULL(0xcd4acdde26ebdecd), ULL(0x345c34e4bd89e434), ULL(0x48d848757a327548),
    ULL(0xff1cff24ab5424ff), ULL(0x7a8e7a8ff78d8f7a), ULL(0x90ad90eaf464ea90), ULL(0x5fe15f3ec29d3e5f),
    ULL(0x206020a01d3da020), ULL(0x68b868d5670fd568), ULL(0x1a2e1a72d0ca721a), ULL(0xaeefae2c19b72cae),
    ULL(0xb4c1b45ec97d5eb4), ULL(0x54fc54199ace1954), ULL(0x93a893e5ec7fe593), ULL(0x226622aa0d2faa22),
    ULL(0x64ac64e90763e964), ULL(0xf10ef112db2a12f1), ULL(0x739573a2bfcca273), ULL(0x1236125a90825a12),
    ULL(0x40c0405d3a7a5d40), ULL(0x0818082840482808), ULL(0xc358c3e85695e8c3), ULL(0xec29ec7b33df7bec),
    ULL(0xdb70db90964d90db), ULL(0xa1fea11f61c01fa1), ULL(0x8d8a8d831c91838d), ULL(0x3d473dc9f5c8c93d),
    ULL(0x97a497f1cc5bf197), ULL(0x0000000000000000), ULL(0xcf4ccfd436f9d4cf), ULL(0x2b7d2b87456e872b),
    ULL(0x769a76b397e1b376), ULL(0x829b82b064e6b082), ULL(0xd667d6a9fe28a9d6), ULL(0x1b2d1b77d8c3771b),
    ULL(0xb5c2b55bc1745bb5), ULL(0xafecaf2911be29af), ULL(0x6abe6adf771ddf6a), ULL(0x50f0500dbaea0d50),
    ULL(0x45cf454c12574c45), ULL(0xf308f318cb3818f3), ULL(0x305030f09dadf030), ULL(0xef2cef742bc474ef),
    ULL(0x3f413fc3e5dac33f), ULL(0x55ff551c92c71c55), ULL(0xa2fba21079db10a2), ULL(0xea23ea6503e965ea),
    ULL(0x65af65ec0f6aec65), ULL(0xbad3ba68b90368ba), ULL(0x2f712f93654a932f), ULL(0xc05dc0e74e8ee7c0),
    ULL(0xde7fde81be6081de), ULL(0x1c241c6ce0fc6c1c), ULL(0xfd1afd2ebb462efd), ULL(0x4dd74d64521f644d),
    ULL(0x92ab92e0e476e092), ULL(0x759f75bc8ffabc75), ULL(0x060a061e30361e06), ULL(0x8a838a9824ae988a),
    ULL(0xb2cbb240f94b40b2), ULL(0xe637e659638559e6), ULL(0x0e120e36707e360e), ULL(0x1f211f63f8e7631f),
    ULL(0x62a662f73755f762), ULL(0xd461d4a3ee3aa3d4), ULL(0xa8e5a832298132a8), ULL(0x96a796f4c452f496),
    ULL(0xf916f93a9b623af9), ULL(0xc552c5f666a3f6c5), ULL(0x256f25b13510b125), ULL(0x59eb5920f2ab2059),
    ULL(0x849184ae54d0ae84), ULL(0x729672a7b7c5a772), ULL(0x394b39ddd5ecdd39), ULL(0x4cd44c615a16614c),
    ULL(0x5ee25e3bca943b5e), ULL(0x78887885e79f8578), ULL(0x384838d8dde5d838), ULL(0x8c898c861498868c),
    ULL(0xd16ed1b2c617b2d1), ULL(0xa5f2a50b41e40ba5), ULL(0xe23be24d43a14de2), ULL(0x61a361f82f4ef861),
    ULL(0xb3c8b345f14245b3), ULL(0x216321a51534a521), ULL(0x9cb99cd69408d69c), ULL(0x1e221e66f0ee661e),
    ULL(0x43c5435222615243), ULL(0xc754c7fc76b1fcc7), ULL(0xfc19fc2bb34f2bfc), ULL(0x040c041420241404),
    ULL(0x51f35108b2e30851), ULL(0x99b699c7bc25c799), ULL(0x6db76dc44f22c46d), ULL(0x0d170d396865390d),
    ULL(0xfa13fa35837935fa), ULL(0xdf7cdf84b66984df), ULL(0x7e827e9bd7a99b7e), ULL(0x246c24b43d19b424),
    ULL(0x3b4d3bd7c5fed73b), ULL(0xabe0ab3d319a3dab), ULL(0xce4fced13ef0d1ce), ULL(0x1133115588995511),
    ULL(0x8f8c8f890c83898f), ULL(0x4ed24e6b4a046b4e), ULL(0xb7c4b751d16651b7), ULL(0xeb20eb600be060eb),
    ULL(0x3c443cccfdc1cc3c), ULL(0x819e81bf7cfdbf81), ULL(0x94a194fed440fe94), ULL(0xf704f70ceb1c0cf7),
    ULL(0xb9d6b967a11867b9), ULL(0x1335135f988b5f13), ULL(0x2c742c9c7d519c2c), ULL(0xd368d3b8d605b8d3),
    ULL(0xe734e75c6b8c5ce7), ULL(0x6eb26ecb5739cb6e), ULL(0xc451c4f36eaaf3c4), ULL(0x0305030f181b0f03),
    ULL(0x56fa56138adc1356), ULL(0x44cc44491a5e4944), ULL(0x7f817f9edfa09e7f), ULL(0xa9e6a937218837a9),
    ULL(0x2a7e2a824d67822a), ULL(0xbbd0bb6db10a6dbb), ULL(0xc15ec1e24687e2c1), ULL(0x53f55302a2f10253),
    ULL(0xdc79dc8bae728bdc), ULL(0x0b1d0b275853270b), ULL(0x9dba9dd39c01d39d), ULL(0x6cb46cc1472bc16c),
    ULL(0x315331f595a4f531), ULL(0x749c74b987f3b974), ULL(0xf607f609e31509f6), ULL(0x46ca46430a4c4346),
    ULL(0xace9ac2609a526ac), ULL(0x898689973cb59789), ULL(0x143c1444a0b44414), ULL(0xe13ee1425bba42e1),
    ULL(0x163a164eb0a64e16), ULL(0x3a4e3ad2cdf7d23a), ULL(0x69bb69d06f06d069), ULL(0x091b092d48412d09),
    ULL(0x709070ada7d7ad70), ULL(0xb6c7b654d96f54b6), ULL(0xd06dd0b7ce1eb7d0), ULL(0xed2aed7e3bd67eed),
    ULL(0xcc49ccdb2ee2dbcc), ULL(0x42c642572a685742), ULL(0x98b598c2b42cc298), ULL(0xa4f1a40e49ed0ea4),
    ULL(0x287828885d758828), ULL(0x5ce45c31da86315c), ULL(0xf815f83f936b3ff8), ULL(0x869786a444c2a486),
};
#endif /* OBSOLETE */

static const uint64_t rc[R + 1] = {
    ULL(0x0000000000000000),
    ULL(0x1823c6e887b8014f),
    ULL(0x36a6d2f5796f9152),
    ULL(0x60bc9b8ea30c7b35),
    ULL(0x1de0d7c22e4bfe57),
    ULL(0x157737e59ff04ada),
    ULL(0x58c9290ab1a06b85),
    ULL(0xbd5d10f4cb3e0567),
    ULL(0xe427418ba77d95d8),
    ULL(0xfbee7c66dd17479e),
    ULL(0xca2dbf07ad5a8333),
};

/**
 * The core Whirlpool transform.
 */
static void processBuffer(struct NESSIEstruct * const structpointer) {
    int32_t i, r;
    uint64_t K[8];        /* the round key */
    uint64_t block[8];    /* mu(buffer) */
    uint64_t state[8];    /* the cipher state */
    uint64_t L[8];
    uint8_t *buffer = structpointer->buffer;

#ifdef TRACE_INTERMEDIATE_VALUES
    printf("The 8x8 matrix Z' derived from the data-string is as follows.\n");
    for (i = 0; i < WBLOCKBYTES/8; i++) {
        printf("    %02X %02X %02X %02X %02X %02X %02X %02X\n",
            buffer[0], buffer[1], buffer[2], buffer[3],
            buffer[4], buffer[5], buffer[6], buffer[7]);
        buffer += 8;
    }
    printf("\n");
    buffer = structpointer->buffer;
#endif /* ?TRACE_INTERMEDIATE_VALUES */

    /*
     * ::collection::map the buffer to a block:
     */
    for (i = 0; i < 8; i++, buffer += 8) {
        block[i] =
            (((uint64_t)buffer[0]        ) << 56) ^
            (((uint64_t)buffer[1] & 0xffL) << 48) ^
            (((uint64_t)buffer[2] & 0xffL) << 40) ^
            (((uint64_t)buffer[3] & 0xffL) << 32) ^
            (((uint64_t)buffer[4] & 0xffL) << 24) ^
            (((uint64_t)buffer[5] & 0xffL) << 16) ^
            (((uint64_t)buffer[6] & 0xffL) <<  8) ^
            (((uint64_t)buffer[7] & 0xffL)      );
    }
    /*
     * compute and apply K^0 to the cipher state:
     */
    state[0] = block[0] ^ (K[0] = structpointer->hash[0]);
    state[1] = block[1] ^ (K[1] = structpointer->hash[1]);
    state[2] = block[2] ^ (K[2] = structpointer->hash[2]);
    state[3] = block[3] ^ (K[3] = structpointer->hash[3]);
    state[4] = block[4] ^ (K[4] = structpointer->hash[4]);
    state[5] = block[5] ^ (K[5] = structpointer->hash[5]);
    state[6] = block[6] ^ (K[6] = structpointer->hash[6]);
    state[7] = block[7] ^ (K[7] = structpointer->hash[7]);
#ifdef TRACE_INTERMEDIATE_VALUES
    printf("The K_0 matrix (from the initialization value IV) and X'' matrix are as follows.\n");
    for (i = 0; i < DIGESTBYTES/8; i++) {
        printf(
            "    %02X %02X %02X %02X %02X %02X %02X %02X        %02X %02X %02X %02X %02X %02X %02X %02X\n",
            (uint8_t)(K[i] >> 56),
            (uint8_t)(K[i] >> 48),
            (uint8_t)(K[i] >> 40),
            (uint8_t)(K[i] >> 32),
            (uint8_t)(K[i] >> 24),
            (uint8_t)(K[i] >> 16),
            (uint8_t)(K[i] >>  8),
            (uint8_t)(K[i]      ),

            (uint8_t)(state[i] >> 56),
            (uint8_t)(state[i] >> 48),
            (uint8_t)(state[i] >> 40),
            (uint8_t)(state[i] >> 32),
            (uint8_t)(state[i] >> 24),
            (uint8_t)(state[i] >> 16),
            (uint8_t)(state[i] >>  8),
            (uint8_t)(state[i]      ));
    }
    printf("\n");
    printf("The following are (hexadecimal representations of) the successive values of the variables K_i for i = 1 to 10 and W'.\n");
    printf("\n");
#endif /* ?TRACE_INTERMEDIATE_VALUES */
    /*
     * iterate over all rounds:
     */
    for (r = 1; r <= R; r++) {
        /*
         * compute K^r from K^{r-1}:
         */
        L[0] =
            C0[(int32_t)((K[0] >> 56) & 0xff)] ^
            C1[(int32_t)((K[7] >> 48) & 0xff)] ^
            C2[(int32_t)((K[6] >> 40) & 0xff)] ^
            C3[(int32_t)((K[5] >> 32) & 0xff)] ^
            C4[(int32_t)((K[4] >> 24) & 0xff)] ^
            C5[(int32_t)((K[3] >> 16) & 0xff)] ^
            C6[(int32_t)((K[2] >>  8) & 0xff)] ^
            C7[(int32_t)((K[1]      ) & 0xff)] ^
            rc[r];
        L[1] =
            C0[(int32_t)((K[1] >> 56) & 0xff)] ^
            C1[(int32_t)((K[0] >> 48) & 0xff)] ^
            C2[(int32_t)((K[7] >> 40) & 0xff)] ^
            C3[(int32_t)((K[6] >> 32) & 0xff)] ^
            C4[(int32_t)((K[5] >> 24) & 0xff)] ^
            C5[(int32_t)((K[4] >> 16) & 0xff)] ^
            C6[(int32_t)((K[3] >>  8) & 0xff)] ^
            C7[(int32_t)((K[2]      ) & 0xff)];
        L[2] =
            C0[(int32_t)((K[2] >> 56) & 0xff)] ^
            C1[(int32_t)((K[1] >> 48) & 0xff)] ^
            C2[(int32_t)((K[0] >> 40) & 0xff)] ^
            C3[(int32_t)((K[7] >> 32) & 0xff)] ^
            C4[(int32_t)((K[6] >> 24) & 0xff)] ^
            C5[(int32_t)((K[5] >> 16) & 0xff)] ^
            C6[(int32_t)((K[4] >>  8) & 0xff)] ^
            C7[(int32_t)((K[3]      ) & 0xff)];
        L[3] =
            C0[(int32_t)((K[3] >> 56) & 0xff)] ^
            C1[(int32_t)((K[2] >> 48) & 0xff)] ^
            C2[(int32_t)((K[1] >> 40) & 0xff)] ^
            C3[(int32_t)((K[0] >> 32) & 0xff)] ^
            C4[(int32_t)((K[7] >> 24) & 0xff)] ^
            C5[(int32_t)((K[6] >> 16) & 0xff)] ^
            C6[(int32_t)((K[5] >>  8) & 0xff)] ^
            C7[(int32_t)((K[4]      ) & 0xff)];
        L[4] =
            C0[(int32_t)((K[4] >> 56) & 0xff)] ^
            C1[(int32_t)((K[3] >> 48) & 0xff)] ^
            C2[(int32_t)((K[2] >> 40) & 0xff)] ^
            C3[(int32_t)((K[1] >> 32) & 0xff)] ^
            C4[(int32_t)((K[0] >> 24) & 0xff)] ^
            C5[(int32_t)((K[7] >> 16) & 0xff)] ^
            C6[(int32_t)((K[6] >>  8) & 0xff)] ^
            C7[(int32_t)((K[5]      ) & 0xff)];
        L[5] =
            C0[(int32_t)((K[5] >> 56) & 0xff)] ^
            C1[(int32_t)((K[4] >> 48) & 0xff)] ^
            C2[(int32_t)((K[3] >> 40) & 0xff)] ^
            C3[(int32_t)((K[2] >> 32) & 0xff)] ^
            C4[(int32_t)((K[1] >> 24) & 0xff)] ^
            C5[(int32_t)((K[0] >> 16) & 0xff)] ^
            C6[(int32_t)((K[7] >>  8) & 0xff)] ^
            C7[(int32_t)((K[6]      ) & 0xff)];
        L[6] =
            C0[(int32_t)((K[6] >> 56) & 0xff)] ^
            C1[(int32_t)((K[5] >> 48) & 0xff)] ^
            C2[(int32_t)((K[4] >> 40) & 0xff)] ^
            C3[(int32_t)((K[3] >> 32) & 0xff)] ^
            C4[(int32_t)((K[2] >> 24) & 0xff)] ^
            C5[(int32_t)((K[1] >> 16) & 0xff)] ^
            C6[(int32_t)((K[0] >>  8) & 0xff)] ^
            C7[(int32_t)((K[7]      ) & 0xff)];
        L[7] =
            C0[(int32_t)((K[7] >> 56) & 0xff)] ^
            C1[(int32_t)((K[6] >> 48) & 0xff)] ^
            C2[(int32_t)((K[5] >> 40) & 0xff)] ^
            C3[(int32_t)((K[4] >> 32) & 0xff)] ^
            C4[(int32_t)((K[3] >> 24) & 0xff)] ^
            C5[(int32_t)((K[2] >> 16) & 0xff)] ^
            C6[(int32_t)((K[1] >>  8) & 0xff)] ^
            C7[(int32_t)((K[0]      ) & 0xff)];
        K[0] = L[0];
        K[1] = L[1];
        K[2] = L[2];
        K[3] = L[3];
        K[4] = L[4];
        K[5] = L[5];
        K[6] = L[6];
        K[7] = L[7];
        /*
         * apply the r-th round transformation:
         */
        L[0] =
            C0[(int32_t)((state[0] >> 56) & 0xff)] ^
            C1[(int32_t)((state[7] >> 48) & 0xff)] ^
            C2[(int32_t)((state[6] >> 40) & 0xff)] ^
            C3[(int32_t)((state[5] >> 32) & 0xff)] ^
            C4[(int32_t)((state[4] >> 24) & 0xff)] ^
            C5[(int32_t)((state[3] >> 16) & 0xff)] ^
            C6[(int32_t)((state[2] >>  8) & 0xff)] ^
            C7[(int32_t)((state[1]      ) & 0xff)] ^
            K[0];
        L[1] =
            C0[(int32_t)((state[1] >> 56) & 0xff)] ^
            C1[(int32_t)((state[0] >> 48) & 0xff)] ^
            C2[(int32_t)((state[7] >> 40) & 0xff)] ^
            C3[(int32_t)((state[6] >> 32) & 0xff)] ^
            C4[(int32_t)((state[5] >> 24) & 0xff)] ^
            C5[(int32_t)((state[4] >> 16) & 0xff)] ^
            C6[(int32_t)((state[3] >>  8) & 0xff)] ^
            C7[(int32_t)((state[2]      ) & 0xff)] ^
            K[1];
        L[2] =
            C0[(int32_t)((state[2] >> 56) & 0xff)] ^
            C1[(int32_t)((state[1] >> 48) & 0xff)] ^
            C2[(int32_t)((state[0] >> 40) & 0xff)] ^
            C3[(int32_t)((state[7] >> 32) & 0xff)] ^
            C4[(int32_t)((state[6] >> 24) & 0xff)] ^
            C5[(int32_t)((state[5] >> 16) & 0xff)] ^
            C6[(int32_t)((state[4] >>  8) & 0xff)] ^
            C7[(int32_t)((state[3]      ) & 0xff)] ^
            K[2];
        L[3] =
            C0[(int32_t)((state[3] >> 56) & 0xff)] ^
            C1[(int32_t)((state[2] >> 48) & 0xff)] ^
            C2[(int32_t)((state[1] >> 40) & 0xff)] ^
            C3[(int32_t)((state[0] >> 32) & 0xff)] ^
            C4[(int32_t)((state[7] >> 24) & 0xff)] ^
            C5[(int32_t)((state[6] >> 16) & 0xff)] ^
            C6[(int32_t)((state[5] >>  8) & 0xff)] ^
            C7[(int32_t)((state[4]      ) & 0xff)] ^
            K[3];
        L[4] =
            C0[(int32_t)((state[4] >> 56) & 0xff)] ^
            C1[(int32_t)((state[3] >> 48) & 0xff)] ^
            C2[(int32_t)((state[2] >> 40) & 0xff)] ^
            C3[(int32_t)((state[1] >> 32) & 0xff)] ^
            C4[(int32_t)((state[0] >> 24) & 0xff)] ^
            C5[(int32_t)((state[7] >> 16) & 0xff)] ^
            C6[(int32_t)((state[6] >>  8) & 0xff)] ^
            C7[(int32_t)((state[5]      ) & 0xff)] ^
            K[4];
        L[5] =
            C0[(int32_t)((state[5] >> 56) & 0xff)] ^
            C1[(int32_t)((state[4] >> 48) & 0xff)] ^
            C2[(int32_t)((state[3] >> 40) & 0xff)] ^
            C3[(int32_t)((state[2] >> 32) & 0xff)] ^
            C4[(int32_t)((state[1] >> 24) & 0xff)] ^
            C5[(int32_t)((state[0] >> 16) & 0xff)] ^
            C6[(int32_t)((state[7] >>  8) & 0xff)] ^
            C7[(int32_t)((state[6]      ) & 0xff)] ^
            K[5];
        L[6] =
            C0[(int32_t)((state[6] >> 56) & 0xff)] ^
            C1[(int32_t)((state[5] >> 48) & 0xff)] ^
            C2[(int32_t)((state[4] >> 40) & 0xff)] ^
            C3[(int32_t)((state[3] >> 32) & 0xff)] ^
            C4[(int32_t)((state[2] >> 24) & 0xff)] ^
            C5[(int32_t)((state[1] >> 16) & 0xff)] ^
            C6[(int32_t)((state[0] >>  8) & 0xff)] ^
            C7[(int32_t)((state[7]      ) & 0xff)] ^
            K[6];
        L[7] =
            C0[(int32_t)((state[7] >> 56) & 0xff)] ^
            C1[(int32_t)((state[6] >> 48) & 0xff)] ^
            C2[(int32_t)((state[5] >> 40) & 0xff)] ^
            C3[(int32_t)((state[4] >> 32) & 0xff)] ^
            C4[(int32_t)((state[3] >> 24) & 0xff)] ^
            C5[(int32_t)((state[2] >> 16) & 0xff)] ^
            C6[(int32_t)((state[1] >>  8) & 0xff)] ^
            C7[(int32_t)((state[0]      ) & 0xff)] ^
            K[7];
        state[0] = L[0];
        state[1] = L[1];
        state[2] = L[2];
        state[3] = L[3];
        state[4] = L[4];
        state[5] = L[5];
        state[6] = L[6];
        state[7] = L[7];
#ifdef TRACE_INTERMEDIATE_VALUES
    printf("i = %d:\n", r);
    for (i = 0; i < DIGESTBYTES/8; i++) {
        printf(
            "    %02X %02X %02X %02X %02X %02X %02X %02X        %02X %02X %02X %02X %02X %02X %02X %02X\n",
            (uint8_t)(K[i] >> 56),
            (uint8_t)(K[i] >> 48),
            (uint8_t)(K[i] >> 40),
            (uint8_t)(K[i] >> 32),
            (uint8_t)(K[i] >> 24),
            (uint8_t)(K[i] >> 16),
            (uint8_t)(K[i] >>  8),
            (uint8_t)(K[i]      ),

            (uint8_t)(state[i] >> 56),
            (uint8_t)(state[i] >> 48),
            (uint8_t)(state[i] >> 40),
            (uint8_t)(state[i] >> 32),
            (uint8_t)(state[i] >> 24),
            (uint8_t)(state[i] >> 16),
            (uint8_t)(state[i] >>  8),
            (uint8_t)(state[i]      ));
    }
    printf("\n");
#endif /* ?TRACE_INTERMEDIATE_VALUES */
    }
    /*
     * apply the Miyaguchi-Preneel compression function:
     */
    structpointer->hash[0] ^= state[0] ^ block[0];
    structpointer->hash[1] ^= state[1] ^ block[1];
    structpointer->hash[2] ^= state[2] ^ block[2];
    structpointer->hash[3] ^= state[3] ^ block[3];
    structpointer->hash[4] ^= state[4] ^ block[4];
    structpointer->hash[5] ^= state[5] ^ block[5];
    structpointer->hash[6] ^= state[6] ^ block[6];
    structpointer->hash[7] ^= state[7] ^ block[7];
#ifdef TRACE_INTERMEDIATE_VALUES
    //printf("Intermediate hash value (after Miyaguchi-Preneel):\n");
    printf("The value of Y' output from the round-function is as follows.\n");
    for (i = 0; i < DIGESTBYTES/8; i++) {
        printf("    %02X %02X %02X %02X %02X %02X %02X %02X\n",
            (uint8_t)((structpointer->hash[i] >> 56),
            (uint8_t)((structpointer->hash[i] >> 48),
            (uint8_t)((structpointer->hash[i] >> 40),
            (uint8_t)((structpointer->hash[i] >> 32),
            (uint8_t)((structpointer->hash[i] >> 24),
            (uint8_t)((structpointer->hash[i] >> 16),
            (uint8_t)((structpointer->hash[i] >>  8),
            (uint8_t)((structpointer->hash[i]      ));
    }
    printf("\n");
#endif /* ?TRACE_INTERMEDIATE_VALUES */
}

/**
 * Initialize the hashing state.
 */
void NESSIEinit(struct NESSIEstruct * const structpointer) {
    int32_t i;

    memset(structpointer->bitLength, 0, 32);
    structpointer->bufferBits = structpointer->bufferPos = 0;
    structpointer->buffer[0] = 0; /* it's only necessary to cleanup buffer[bufferPos] */
    for (i = 0; i < 8; i++) {
        structpointer->hash[i] = 0L; /* initial value */
    }
#ifdef TRACE_INTERMEDIATE_VALUES
    /*
    printf("Initial hash value:\n");
    for (i = 0; i < DIGESTBYTES/8; i++) {
        printf("    %02X %02X %02X %02X %02X %02X %02X %02X\n",
            (uint8_t)((structpointer->hash[i] >> 56),
            (uint8_t)((structpointer->hash[i] >> 48),
            (uint8_t)((structpointer->hash[i] >> 40),
            (uint8_t)((structpointer->hash[i] >> 32),
            (uint8_t)((structpointer->hash[i] >> 24),
            (uint8_t)((structpointer->hash[i] >> 16),
            (uint8_t)((structpointer->hash[i] >>  8),
            (uint8_t)((structpointer->hash[i]      ));
    }
    printf("\n");
    */
#endif /* ?TRACE_INTERMEDIATE_VALUES */
}

/**
 * Delivers input data to the hashing algorithm.
 *
 * @param    source        plaintext data to hash.
 * @param    sourceBits    how many bits of plaintext to process.
 *
 * This method maintains the invariant: bufferBits < DIGESTBITS
 */
void NESSIEadd(const unsigned char * const source,
               unsigned long sourceBits,
               struct NESSIEstruct * const structpointer) {
    /*
                       sourcePos
                       |
                       +-------+-------+-------
                          ||||||||||||||||||||| source
                       +-------+-------+-------
    +-------+-------+-------+-------+-------+-------
    ||||||||||||||||||||||                           buffer
    +-------+-------+-------+-------+-------+-------
                    |
                    bufferPos
    */
    int32_t sourcePos    = 0; /* index of leftmost source uint8_t containing data (1 to 8 bits). */
    int32_t sourceGap    = (8 - ((int32_t)sourceBits & 7)) & 7; /* space on source[sourcePos]. */
    int32_t bufferRem    = structpointer->bufferBits & 7; /* occupied bits on buffer[bufferPos]. */
    int32_t i;
    uint32_t b, carry;
    uint8_t *buffer       = structpointer->buffer;
    uint8_t *bitLength    = structpointer->bitLength;
    int32_t bufferBits   = structpointer->bufferBits;
    int32_t bufferPos    = structpointer->bufferPos;

    /*
     * tally the length of the added data:
     */
    uint64_t value = sourceBits;
    for (i = 31, carry = 0; i >= 0 && (carry != 0 || value != ULL(0)); i--) {
        carry += bitLength[i] + ((uint32_t)value & 0xff);
        bitLength[i] = (uint8_t)carry;
        carry >>= 8;
        value >>= 8;
    }
    /*
     * process data in chunks of 8 bits (a more efficient approach would be to take whole-word chunks):
     */
    while (sourceBits > 8) {
        /* N.B. at least source[sourcePos] and source[sourcePos+1] contain data. */
        /*
         * take a byte from the source:
         */
        b = ((source[sourcePos] << sourceGap) & 0xff) |
            ((source[sourcePos + 1] & 0xff) >> (8 - sourceGap));
        /*
         * process this byte:
         */
        buffer[bufferPos++] |= (uint8_t)(b >> bufferRem);
        bufferBits += 8 - bufferRem; /* bufferBits = 8*bufferPos; */
        if (bufferBits == NESSIE_DIGESTBITS) {
            /*
             * process data block:
             */
            processBuffer(structpointer);
            /*
             * reset buffer:
             */
            bufferBits = bufferPos = 0;
        }
        buffer[bufferPos] = (uint8_t) ((b << (8 - bufferRem)) & 0xff);
        bufferBits += bufferRem;
        /*
         * proceed to remaining data:
         */
        sourceBits -= 8;
        sourcePos++;
    }
    /* now 0 <= sourceBits <= 8;
     * furthermore, all data (if any is left) is in source[sourcePos].
     */
    if (sourceBits > 0) {
        b = (source[sourcePos] << sourceGap) & 0xff; /* bits are left-justified on b. */
        /*
         * process the remaining bits:
         */
        buffer[bufferPos] |= b >> bufferRem;
    } else {
        b = 0;
    }
    if (bufferRem + sourceBits < 8) {
        /*
         * all remaining data fits on buffer[bufferPos],
         * and there still remains some space.
         */
        bufferBits += sourceBits;
    } else {
        /*
         * buffer[bufferPos] is full:
         */
        bufferPos++;
        bufferBits += 8 - bufferRem; /* bufferBits = 8*bufferPos; */
        sourceBits -= 8 - bufferRem;
        /* now 0 <= sourceBits < 8;
         * furthermore, all data (if any is left) is in source[sourcePos].
         */
        if (bufferBits == NESSIE_DIGESTBITS) {
            /*
             * process data block:
             */
            processBuffer(structpointer);
            /*
             * reset buffer:
             */
            bufferBits = bufferPos = 0;
        }
        buffer[bufferPos] = (uint8_t)((b << (8 - bufferRem)) & 0xff);
        bufferBits += (int32_t)sourceBits;
    }
    structpointer->bufferBits   = bufferBits;
    structpointer->bufferPos    = bufferPos;
}

/**
 * Get the hash value from the hashing state.
 * 
 * This method uses the invariant: bufferBits < DIGESTBITS
 */
void NESSIEfinalize(struct NESSIEstruct * const structpointer,
                    unsigned char * const result) {
    int32_t i;
    uint8_t *buffer      = structpointer->buffer;
    uint8_t *bitLength   = structpointer->bitLength;
    int32_t bufferBits  = structpointer->bufferBits;
    int32_t bufferPos   = structpointer->bufferPos;
    uint8_t *digest      = result;

    /*
     * append a '1'-bit:
     */
    buffer[bufferPos] |= 0x80U >> (bufferBits & 7);
    bufferPos++; /* all remaining bits on the current uint8_t are set to zero. */
    /*
     * pad with zero bits to complete (N*WBLOCKBITS - LENGTHBITS) bits:
     */
    if (bufferPos > NESSIE_WBLOCKBYTES - NESSIE_LENGTHBYTES) {
        if (bufferPos < NESSIE_WBLOCKBYTES) {
            memset(&buffer[bufferPos], 0, NESSIE_WBLOCKBYTES - bufferPos);
        }
        /*
         * process data block:
         */
        processBuffer(structpointer);
        /*
         * reset buffer:
         */
        bufferPos = 0;
    }
    if (bufferPos < NESSIE_WBLOCKBYTES - NESSIE_LENGTHBYTES) {
        memset(&buffer[bufferPos], 0, (NESSIE_WBLOCKBYTES - NESSIE_LENGTHBYTES) - bufferPos);
    }
    bufferPos = NESSIE_WBLOCKBYTES - NESSIE_LENGTHBYTES;
    /*
     * append bit length of hashed data:
     */
    memcpy(&buffer[NESSIE_WBLOCKBYTES - NESSIE_LENGTHBYTES], bitLength, NESSIE_LENGTHBYTES);
    /*
     * process data block:
     */
    processBuffer(structpointer);
    /*
     * return the completed message digest:
     */
    for (i = 0; i < NESSIE_DIGESTBYTES/8; i++) {
        digest[0] = (uint8_t)((structpointer->hash[i] >> 56) & 0xff);
        digest[1] = (uint8_t)((structpointer->hash[i] >> 48) & 0xff);
        digest[2] = (uint8_t)((structpointer->hash[i] >> 40) & 0xff);
        digest[3] = (uint8_t)((structpointer->hash[i] >> 32) & 0xff);
        digest[4] = (uint8_t)((structpointer->hash[i] >> 24) & 0xff);
        digest[5] = (uint8_t)((structpointer->hash[i] >> 16) & 0xff);
        digest[6] = (uint8_t)((structpointer->hash[i] >>  8) & 0xff);
        digest[7] = (uint8_t)((structpointer->hash[i]      ) & 0xff);
        digest += 8;
    }
    structpointer->bufferBits   = bufferBits;
    structpointer->bufferPos    = bufferPos;
}

/*
static void display(const uint8_t array[], int32_t length) {
    int32_t i;
    for (i = 0; i < length; i++) {
        if (i%32 == 0) {
            printf("\n");
        }
        if (i%8 == 0) {
            printf(" ");
        }
        printf("%02X", array[i]);
    }
}
*/

#define NESSIE_LONG_ITERATION 100000000

/**
 * Generate the test vector set for Whirlpool.
 *
 * The test consists of:
 * 1. hashing all bit strings containing only zero bits
 *    for all lengths from 0 to 1023;
 * 2. hashing all 512-bit strings containing a single set bit;
 * 3. the iterated hashing of the 512-bit string of zero bits a large number of times.
 */
void makeNESSIETestVectors() {
    int32_t i;
    struct NESSIEstruct w;
    uint8_t digest[NESSIE_DIGESTBYTES];
    uint8_t data[128];

    memset(data, 0, sizeof(data));
//    printf("Message digests of strings of 0-bits and length L:\n");
    for (i = 0; i < 1024; i++) {
        NESSIEinit(&w);
        NESSIEadd(data, i, &w);
        NESSIEfinalize(&w, digest);
//        printf("    L = %4d: ", i); display(digest, DIGESTBYTES); printf("\n");
    }
  //  printf("Message digests of all 512-bit strings S containing a single 1-bit:\n");
    memset(data, 0, sizeof(data));
    for (i = 0; i < 512; i++) {
        /* set bit i: */
        data[i/8] |= 0x80U >> (i % 8);
        NESSIEinit(&w);
        NESSIEadd(data, 512, &w);
        NESSIEfinalize(&w, digest);
  //      printf("    S = "); display(data, 512/8); printf(": ");
    //    display(digest, DIGESTBYTES); printf("\n");
        /* reset bit i: */
        data[i/8] = 0;
    }
    memset(digest, 0, sizeof(digest));
    for (i = 0; i < NESSIE_LONG_ITERATION; i++) {
        NESSIEinit(&w);
        NESSIEadd(digest, 512, &w);
        NESSIEfinalize(&w, digest);
    }
//    fflush(stdout);
  //  printf("Iterated message digest computation (%d times): ", LONG_ITERATION);
    //display(digest, DIGESTBYTES); printf("\n");
}



/*
#define TIMING_ITERATIONS 100000

static void timing() {
    int32_t i;
    NESSIEstruct w;
    uint8_t digest[DIGESTBYTES];
    uint8_t data[1024];
    clock_t elapsed;
    float sec;
    
    memset(data, 0, sizeof(data));

    printf("Overall timing...");
    elapsed = -clock();
    for (i = 0; i < TIMING_ITERATIONS; i++) {
        NESSIEinit(&w);
        NESSIEadd(data, 8*sizeof(data), &w);
        NESSIEfinalize(&w, digest);
    }
    elapsed += clock();
    sec = (float)elapsed/CLOCKS_PER_SEC;
    printf(" %.1f s, %.1f Mbit/s, %.1f cycles/byte.\n",
        sec,
        (float)8*sizeof(data)*TIMING_ITERATIONS/sec/1000000,
        (float)550e6*sec/(sizeof(data)*TIMING_ITERATIONS));

    printf("Compression function timing...");
    NESSIEinit(&w);
    elapsed = -clock();
    for (i = 0; i < TIMING_ITERATIONS; i++) {
        processBuffer(&w);
    }
    elapsed += clock();
    NESSIEfinalize(&w, digest);
    sec = (float)elapsed/CLOCKS_PER_SEC;
    printf(" %.1f s, %.1f Mbit/s, %.1f cycles/byte.\n",
        sec,
        (float)512*TIMING_ITERATIONS/sec/1000000,
        (float)550e6*sec/(64*TIMING_ITERATIONS));
}
*/

/*void testAPI() {
    uint32_t pieceLen, totalLen, dataLen;
    NESSIEstruct w;
    uint8_t dataBuf[512], expectedDigest[DIGESTBYTES], computedDigest[DIGESTBYTES];

    for (dataLen = 0; dataLen <= sizeof(dataBuf); dataLen++) {
        if ((dataLen & 0xff) == 0) {
            fprintf(stderr, "."); fflush(stderr);
        }
        //
        // do the hashing in pieces of variable length:
        //
        NESSIEinit(&w);
        NESSIEadd(dataBuf, 8*dataLen, &w);
        NESSIEfinalize(&w, expectedDigest);
        if (dataLen > 0) {
            for (pieceLen = 1; pieceLen <= dataLen; pieceLen++) {
                NESSIEinit(&w);
                for (totalLen = 0; totalLen + pieceLen <= dataLen; totalLen += pieceLen) {
                    NESSIEadd(dataBuf + totalLen, 8*pieceLen, &w);
                }
                if (totalLen < dataLen) {
                    NESSIEadd(dataBuf + totalLen, 8*(dataLen - totalLen), &w);
                }
                NESSIEfinalize(&w, computedDigest);
                if (memcmp(computedDigest, expectedDigest, DIGESTBYTES) != 0) {
                    fprintf(stderr, "API error @ pieceLen = %lu\n", pieceLen);
                    display(computedDigest, DIGESTBYTES); printf("\n\n");
                    display(expectedDigest, DIGESTBYTES); printf("\n\n");
                    return;
                }
            }
        } else {
            NESSIEinit(&w);
            NESSIEfinalize(&w, computedDigest);
            if (memcmp(computedDigest, expectedDigest, DIGESTBYTES) != 0) {
                fprintf(stderr, "API error @ pieceLen = 0\n");
                return;
            }
        }
    }
    printf("No error detected.\n");
}*/

/*void makeISOTestVectors() {
    struct NESSIEstruct w;
    uint8_t digest[DIGESTBYTES];
    static uint8_t data[1000000];

    memset(data, 0, sizeof(data));

    printf("1. In this example the data-string is the is_empty string, i.e. the string of length zero.\n\n");
    NESSIEinit(&w);
    NESSIEadd(data, 8*0, &w);
    NESSIEfinalize(&w, digest);
    printf("The hash-code is the following 512-bit string.\n\n");
    display(digest, DIGESTBYTES); printf("\n\n");

    printf("2. In this example the data-string consists of a single byte, namely the ASCII-coded version of the letter 'a'.\n\n");
    NESSIEinit(&w);
    NESSIEadd("a", 8*1, &w);
    NESSIEfinalize(&w, digest);
    printf("The hash-code is the following 512-bit string.\n\n");
    display(digest, DIGESTBYTES); printf("\n\n");

    printf("3. In this example the data-string is the three-byte string consisting of the ASCII-coded version of 'abc'.\n\n");
    NESSIEinit(&w);
    NESSIEadd("abc", 8*3, &w);
    NESSIEfinalize(&w, digest);
    printf("The hash-code is the following 512-bit string.\n\n");
    display(digest, DIGESTBYTES); printf("\n\n");

    printf("4. In this example the data-string is the 14-byte string consisting of the ASCII-coded version of 'message digest'.\n\n");
    NESSIEinit(&w);
    NESSIEadd("message digest", 8*14, &w);
    NESSIEfinalize(&w, digest);
    printf("The hash-code is the following 512-bit string.\n\n");
    display(digest, DIGESTBYTES); printf("\n\n");

    printf("5. In this example the data-string is the 26-byte string consisting of the ASCII-coded version of 'abcdefghijklmnopqrstuvwxyz'.\n\n");
    NESSIEinit(&w);
    NESSIEadd("abcdefghijklmnopqrstuvwxyz", 8*26, &w);
    NESSIEfinalize(&w, digest);
    printf("The hash-code is the following 512-bit string.\n\n");
    display(digest, DIGESTBYTES); printf("\n\n");

    printf("6. In this example the data-string is the 62-byte string consisting of the ASCII-coded version of 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'.\n\n");
    NESSIEinit(&w);
    NESSIEadd("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", 8*62, &w);
    NESSIEfinalize(&w, digest);
    printf("The hash-code is the following 512-bit string.\n\n");
    display(digest, DIGESTBYTES); printf("\n\n");

    printf("7. In this example the data-string is the 80-byte string consisting of the ASCII-coded version of eight repetitions of '1234567890'.\n\n");
    NESSIEinit(&w);
    NESSIEadd("12345678901234567890123456789012345678901234567890123456789012345678901234567890", 8*80, &w);
    NESSIEfinalize(&w, digest);
    printf("The hash-code is the following 512-bit string.\n\n");
    display(digest, DIGESTBYTES); printf("\n\n");

    printf("8. In this example the data-string is the 32-byte string consisting of the ASCII-coded version of 'abcdbcdecdefdefgefghfghighijhijk'.\n\n");
    NESSIEinit(&w);
    NESSIEadd("abcdbcdecdefdefgefghfghighijhijk", 8*32, &w);
    NESSIEfinalize(&w, digest);
    printf("The hash-code is the following 512-bit string.\n\n");
    display(digest, DIGESTBYTES); printf("\n\n");
    fflush(stdout);

    memset(data, 'a', 1000000);
    printf("9. In this example the data-string is the 1000000-byte string consisting of the ASCII-coded version of 'a' repeated 10^6 times.\n\n");
    NESSIEinit(&w);
    NESSIEadd(data, 8*1000000, &w);
    NESSIEfinalize(&w, digest);
    printf("The hash-code is the following 512-bit string.\n\n");
    display(digest, DIGESTBYTES); printf("\n\n");
    fflush(stdout);

    printf("\n");
    fflush(stdout);
}*/

#ifdef TRACE_INTERMEDIATE_VALUES
static void makeIntermediateValues() {
    struct NESSIEstruct w;
    uint8_t digest[DIGESTBYTES];

    printf("3. In this example the data-string is the three-byte string consisting of the ASCII-coded version of 'abc'.\n\n");
    NESSIEinit(&w);
    NESSIEadd("abc", 8*3, &w);
    NESSIEfinalize(&w, digest);
    printf("The hash-code is the following 512-bit string.\n\n");
    display(digest, DIGESTBYTES); printf("\n\n");

    printf("8. In this example the data-string is the 32-byte string consisting of the ASCII-coded version of 'abcdbcdecdefdefgefghfghighijhijk'.\n\n");
    NESSIEinit(&w);
    NESSIEadd("abcdbcdecdefdefgefghfghighijhijk", 8*32, &w);
    NESSIEfinalize(&w, digest);
    printf("The hash-code is the following 512-bit string.\n\n");
    display(digest, DIGESTBYTES); printf("\n\n");
    fflush(stdout);

    fflush(stdout);
}
#endif /* ?TRACE_INTERMEDIATE_VALUES */

